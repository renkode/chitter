{
  "version": 3,
  "file": "js/768.28944bfb.js",
  "mappings": "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",
  "sources": [
    "webpack://chitter/./src/components/subcomponents/TweetCardFull.vue",
    "webpack://chitter/./src/components/subcomponents/TweetCardFull.vue?588a",
    "webpack://chitter/./src/components/TweetContext.vue",
    "webpack://chitter/./src/components/TweetContext.vue?b48c",
    "webpack://chitter/./src/components/subcomponents/EmbeddedText.vue",
    "webpack://chitter/./src/components/subcomponents/EmbeddedText.vue?411b",
    "webpack://chitter/./src/components/subcomponents/TweetCard.vue",
    "webpack://chitter/./src/components/subcomponents/TweetCard.vue?5deb"
  ],
  "sourcesContent": [
    "<script setup>\r\nimport { ref, defineProps, computed } from \"vue\";\r\nimport ProfilePicture from \"./ProfilePicture.vue\";\r\nimport EmbeddedText from \"./EmbeddedText.vue\";\r\nimport formatDateMixin from \"@/mixins/formatDateMixin.js\";\r\nimport { getMediaClass } from \"@/mixins/utilities.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({\r\n  id: String,\r\n  user: Object,\r\n  tweet: Object,\r\n  type: String, // status, retweet, reply\r\n  replyingTo: String,\r\n  isRetweetedBy: String,\r\n});\r\n\r\nconst isTweetMenuOpen = ref(false);\r\nconst tweetContainer = ref(null);\r\n\r\nconst isLiked = computed(() => tweets.hasLiked(props.tweet.id, users.currentId));\r\nconst isRetweeted = computed(() =>\r\n  tweets.hasRetweeted(props.tweet.id, users.currentId)\r\n);\r\n\r\nconst toggleModal = (type) => {\r\n  app.setModalType(type);\r\n  app.toggleModal();\r\n};\r\n\r\nconst toggleTweetMenu = () => {\r\n  if (!users.currentUser) return;\r\n  isTweetMenuOpen.value = !isTweetMenuOpen.value;\r\n};\r\n\r\nconst deleteTweet = () => {\r\n  if (app.routeTweetId == props.id) {\r\n    if (props.tweet.replyingToTweet)\r\n      app.viewTweet(props.tweet.replyingToTweet);\r\n  } else {\r\n    app.viewTweet(null);\r\n  }\r\n  tweets.removeTweet(props.id, props.user.id);\r\n};\r\n\r\nconst toggleLike = () => {\r\n  if (!isLiked.value) {\r\n    tweets.addLike(props.id, users.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeLike(props.id, users.currentId);\r\n  }\r\n};\r\nconst toggleRetweet = () => {\r\n  if (!isRetweeted.value) {\r\n    tweets.addRetweet(props.id, users.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeRetweet(props.id, users.currentId);\r\n  }\r\n};\r\nconst setReply = () => {\r\n  app.setModalType(\"reply\");\r\n  app.setModalReply(props.user.id, props.id);\r\n  app.toggleModal();\r\n};\r\nconst shareTweet = () => {\r\n  app.toast(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(`${window.location.host}/status/${props.id}`);\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"tweet-container\" ref=\"tweetContainer\">\r\n    <div\r\n      class=\"user-retweet gray-text\"\r\n      v-if=\"props.type === 'retweet' && props.retweetedBy\"\r\n    >\r\n      <v-icon name=\"la-retweet-solid\" scale=\"0.89\" fill=\"#ffffff80\" />\r\n      {{ props.retweetedBy }}\r\n      Retweeted\r\n    </div>\r\n    <div class=\"tweet-body\">\r\n      <div class=\"profile-pic-and-user\">\r\n        <div class=\"profile-pic-container\">\r\n          <ProfilePicture\r\n            :url=\"props.user.avatarUrl\"\r\n            :size=\"48\"\r\n            @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n          />\r\n        </div>\r\n        <div class=\"tweet-data\">\r\n          <div class=\"user-info-and-btn\">\r\n            <div class=\"user-info-wrapper\">\r\n              <span\r\n                class=\"display-name\"\r\n                @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n                ><a>{{ props.user.name }}</a></span\r\n              >\r\n              <span\r\n                class=\"username gray-text\"\r\n                @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n                ><a>@{{ props.user.username }}</a></span\r\n              >\r\n            </div>\r\n            <span\r\n              class=\"tweet-action-icon extra-btn\"\r\n              @click.stop=\"toggleTweetMenu\"\r\n              ><v-icon name=\"hi-dots-horizontal\" scale=\"1.0\" fill=\"#ffffff80\" />\r\n              <div v-if=\"isTweetMenuOpen\" class=\"overlay\"></div>\r\n              <div v-if=\"isTweetMenuOpen\" class=\"tweet-menu-container\">\r\n                <ul class=\"tweet-menu-list\">\r\n                  <li\r\n                    class=\"tweet-menu-item delete-tweet\"\r\n                    v-if=\"\r\n                      users.currentId == props.user.id || users.currentUser.isAdmin\r\n                    \"\r\n                    @click=\"deleteTweet\"\r\n                  >\r\n                    <span class=\"tweet-menu-icon\"\r\n                      ><v-icon name=\"bi-trash\" scale=\"1.1\" fill=\"red\" /></span\r\n                    >Delete\r\n                  </li>\r\n                  <li\r\n                    class=\"tweet-menu-item\"\r\n                    v-if=\"users.canFollow(users.currentUser, props.user.id)\"\r\n                    @click=\"users.followUser(users.currentId, props.user.id)\"\r\n                  >\r\n                    <span class=\"tweet-menu-icon\"\r\n                      ><v-icon\r\n                        name=\"co-user-follow\"\r\n                        scale=\"1.1\"\r\n                        fill=\"#ffffff80\" /></span\r\n                    >Follow @{{ props.user.username }}\r\n                  </li>\r\n                  <li\r\n                    class=\"tweet-menu-item\"\r\n                    v-if=\"users.canUnfollow(users.currentUser, props.user.id)\"\r\n                    @click=\"users.unfollowUser(users.currentId, props.user.id)\"\r\n                  >\r\n                    <span class=\"tweet-menu-icon\"\r\n                      ><v-icon\r\n                        name=\"co-user-unfollow\"\r\n                        scale=\"1.1\"\r\n                        fill=\"#ffffff80\" /></span\r\n                    >Unfollow @{{ props.user.username }}\r\n                  </li>\r\n                  <button class=\"cancel-btn\">Cancel</button>\r\n                </ul>\r\n              </div></span\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"tweet-content\">\r\n        <div\r\n          class=\"replying-to\"\r\n          v-if=\"props.tweet.type === 'reply' && props.tweet.replyingToTweet\"\r\n        >\r\n          <span class=\"gray-text\">Replying to </span>\r\n          <a\r\n            class=\"blue-link\"\r\n            @click.stop=\"app.viewUserProfile(props.replyingTo)\"\r\n            >@{{ props.replyingTo }}</a\r\n          >\r\n        </div>\r\n        <div class=\"tweet-text\"><EmbeddedText :text=\"props.tweet.text\" /></div>\r\n        <div\r\n          class=\"tweet-media\"\r\n          :class=\"[getMediaClass(props.tweet.media)]\"\r\n          v-if=\"props.tweet.media.length > 0\"\r\n        >\r\n          <div\r\n            class=\"image-preview-wrapper\"\r\n            v-for=\"img in props.tweet.media\"\r\n            :key=\"props.tweet.media.indexOf(img)\"\r\n          >\r\n            <img :src=\"img\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"date-and-time\">\r\n        <span class=\"tweet-time gray-text\">{{\r\n          formatDateMixin.formatTime(props.tweet.timestamp)\r\n        }}</span>\r\n        <span class=\"separator gray-text\">·</span>\r\n        <span class=\"tweet-time gray-text\">{{\r\n          formatDateMixin.formatFullDate(props.tweet.timestamp)\r\n        }}</span>\r\n      </div>\r\n\r\n      <div\r\n        class=\"tweet-metrics-wrapper\"\r\n        v-if=\"props.tweet.retweetCount > 0 || props.tweet.likeCount > 0\"\r\n      >\r\n        <span\r\n          class=\"tweet-metric\"\r\n          v-if=\"props.tweet.retweetCount > 0\"\r\n          @click=\"toggleModal('retweet-list')\"\r\n          ><strong>{{ props.tweet.retweetCount }}</strong>\r\n          <span class=\"gray-text\"> Retweets</span></span\r\n        >\r\n        <span\r\n          class=\"tweet-metric\"\r\n          v-if=\"props.tweet.likeCount > 0\"\r\n          @click=\"toggleModal('like-list')\"\r\n          ><strong>{{ props.tweet.likeCount }}</strong>\r\n          <span class=\"gray-text\"> Likes</span></span\r\n        >\r\n      </div>\r\n\r\n      <div class=\"tweet-actions-wrapper\">\r\n        <div class=\"tweet-action-container\">\r\n          <span class=\"tweet-action-icon reply-btn\" @click.stop=\"setReply\"\r\n            ><v-icon name=\"fa-regular-comment\" scale=\"1.3\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n        <div class=\"tweet-action-container\">\r\n          <span\r\n            class=\"tweet-action-icon retweet-btn\"\r\n            :class=\"{ retweeted: isRetweeted }\"\r\n            @click.stop=\"toggleRetweet\"\r\n            ><v-icon name=\"la-retweet-solid\" scale=\"1.45\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n        <div class=\"tweet-action-container\">\r\n          <span\r\n            class=\"tweet-action-icon like-btn\"\r\n            :class=\"{ liked: isLiked }\"\r\n            @click.stop=\"toggleLike\"\r\n            ><v-icon name=\"fa-regular-heart\" scale=\"1.3\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n        <div class=\"tweet-action-container\">\r\n          <span\r\n            class=\"tweet-action-icon share-tweet-btn\"\r\n            @click.stop=\"shareTweet\"\r\n            ><v-icon name=\"gi-share\" scale=\"1.3\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.tweet-container {\r\n  cursor: auto;\r\n  border-top: 0;\r\n}\r\n\r\n.tweet-container:hover {\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n.tweet-body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0;\r\n}\r\n\r\n.profile-pic-and-user {\r\n  width: 100%;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.profile-pic-container {\r\n  height: 100%;\r\n  width: fit-content;\r\n}\r\n\r\n.user-info-and-btn {\r\n  width: 100%;\r\n  max-width: 505px;\r\n  height: 100%;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.user-info-wrapper {\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: center;\r\n}\r\n\r\n.tweet-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 0;\r\n  margin-top: 0.7rem;\r\n}\r\n\r\n.tweet-text {\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.date-and-time {\r\n  margin: 0.8rem 0;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.tweet-metrics-wrapper {\r\n  width: 100%;\r\n  height: 54px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  border-top: rgba(255, 255, 255, 0.2) 1px solid;\r\n}\r\n\r\n.tweet-actions-wrapper {\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0.6rem 0 0.5rem 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-top: rgba(255, 255, 255, 0.2) 1px solid;\r\n}\r\n\r\n.tweet-action-container {\r\n  flex: 1;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.tweet-action-icon {\r\n  cursor: pointer;\r\n  width: 40px;\r\n  height: 40px;\r\n}\r\n\r\n.tweet-metrics-wrapper {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.tweet-metric {\r\n  width: fit-content;\r\n  position: relative;\r\n  left: 0px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.tweet-metric:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>\r\n",
    "import script from \"./TweetCardFull.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetCardFull.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetCardFull.vue?vue&type=style&index=0&id=c7c51d32&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-c7c51d32\"]])\n\nexport default __exports__",
    "<script setup>\r\nimport { defineProps, ref, computed, watch, onMounted } from \"vue\";\r\nimport TweetCard from \"./subcomponents/TweetCard.vue\";\r\nimport TweetCardFull from \"./subcomponents/TweetCardFull.vue\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\n\r\n// didn't use tweetlist since deleted tweets would have to be handled differently\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst store = useTweetStore();\r\nconst props = defineProps([\"id\"]);\r\n\r\nconst tweet = computed(() => store.getTweet(props.id));\r\nconst previousTweet = computed(() => {\r\n  if (tweet.value) return store.getTweet(tweet.value.replyingToTweet);\r\n  return null;\r\n});\r\nconst previousTweets = ref([]);\r\nconst replies = computed(() => {\r\n  if (tweet.value) {\r\n    return tweet.value.repliesFrom.map((id) => store.getTweet(id)) || [];\r\n  } else {\r\n    return null;\r\n  }\r\n});\r\n\r\n// kinda like a linked list\r\nconst fetchPreviousTweets = () => {\r\n  previousTweets.value = [];\r\n  if (!tweet.value) return;\r\n  let currentTweet = tweet.value;\r\n  while (currentTweet.replyingToTweet) {\r\n    try {\r\n      let lastTweet = store.getTweet(currentTweet.replyingToTweet);\r\n      if (!lastTweet) {\r\n        previousTweets.value.unshift(null);\r\n        break;\r\n      }\r\n      previousTweets.value.unshift(lastTweet);\r\n      currentTweet = lastTweet;\r\n    } catch {\r\n      throw new Error(\"loop gone wild\");\r\n    }\r\n  }\r\n};\r\n\r\n// refresh whenever current tweet or previous tweet change/get deleted\r\nwatch([() => app.viewTweetId, previousTweet], () => {\r\n  fetchPreviousTweets();\r\n});\r\n\r\nonMounted(() => {\r\n  fetchPreviousTweets();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"tweet-list-container\" v-if=\"tweet\">\r\n    <template v-for=\"tweet in previousTweets\">\r\n      <template v-if=\"!tweet\">\r\n        <div class=\"tweet-container\" :key=\"previousTweets.indexOf(tweet)\">\r\n          <div class=\"deleted-tweet\">\r\n            <span class=\"gray-text\">Tweet has been deleted.</span>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <template v-else>\r\n        <TweetCard\r\n          :key=\"tweet.id\"\r\n          :id=\"tweet.id\"\r\n          :user=\"{\r\n            id: tweet.authorId,\r\n            name: users.getUser(tweet.authorId).name,\r\n            username: users.getUser(tweet.authorId).username,\r\n            avatarUrl: users.getUser(tweet.authorId).avatarUrl,\r\n          }\"\r\n          :tweet=\"tweet\"\r\n          :type=\"tweet.type\"\r\n          :replyingTo=\"users.getUsername(tweet.replyingToUser)\"\r\n          :isPreviousReply=\"true\"\r\n        />\r\n      </template>\r\n    </template>\r\n    <template v-if=\"tweet\">\r\n      <TweetCardFull\r\n        :id=\"tweet.id\"\r\n        :user=\"{\r\n          id: tweet.authorId,\r\n          name: users.getUser(tweet.authorId).name,\r\n          username: users.getUser(tweet.authorId).username,\r\n          avatarUrl: users.getUser(tweet.authorId).avatarUrl,\r\n        }\"\r\n        :tweet=\"tweet\"\r\n        :type=\"tweet.type\"\r\n        :replyingTo=\"users.getUsername(tweet.replyingToUser)\"\r\n    /></template>\r\n\r\n    <template v-if=\"replies && replies.length > 0\">\r\n      <TweetCard\r\n        v-for=\"tweet in replies\"\r\n        :key=\"tweet.id\"\r\n        :id=\"tweet.id\"\r\n        :user=\"{\r\n          id: tweet.authorId,\r\n          name: users.getUser(tweet.authorId).name,\r\n          username: users.getUser(tweet.authorId).username,\r\n          avatarUrl: users.getUser(tweet.authorId).avatarUrl,\r\n        }\"\r\n        :tweet=\"tweet\"\r\n        :type=\"tweet.type\"\r\n        :replyingTo=\"users.getUsername(tweet.replyingToUser)\"\r\n        :isPreviousReply=\"false\"\r\n      />\r\n    </template>\r\n  </div>\r\n  <div class=\"error gray-text\" v-else>Tweet does not exist.</div>\r\n</template>\r\n\r\n<style scoped>\r\n.deleted-tweet {\r\n  width: 90%;\r\n  height: 3rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-list-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n",
    "import script from \"./TweetContext.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetContext.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetContext.vue?vue&type=style&index=0&id=605ba40b&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-605ba40b\"]])\n\nexport default __exports__",
    "<script setup>\r\nimport { ref, defineProps, onMounted } from \"vue\";\r\nimport { urlRegex, hashtagRegex, atRegex } from \"@/mixins/utilities.js\";\r\nimport { useAppStore } from \"@/stores/app\";\r\n\r\nconst props = defineProps([\"text\"]);\r\nconst textEl = ref(null);\r\nconst app = useAppStore();\r\n\r\nconst embedLinks = () => {\r\n  if (!props.text || props.text.length === 0) return;\r\n\r\n  const embedArr = props.text.split(\" \").map((str) => {\r\n    const newLineSplit = str.split(/\\r?\\n/);\r\n    switch (true) {\r\n      case urlRegex.test(str):\r\n        return `<a class=\"blue-link\" href=\"${str}\" target=\"_blank\">${str}</a>`;\r\n      case hashtagRegex.test(str):\r\n        return `<a class=\"blue-link\">${str}</a>`;\r\n      case newLineSplit.some((word) => atRegex.test(word)): // SPLIT BY NEWLINE\r\n        return newLineSplit\r\n          .map((word) => {\r\n            if (atRegex.test(word)) {\r\n              return `<a class=\"blue-link user-link\" data-username=${str.replace(\r\n                \"@\",\r\n                \"\"\r\n              )}>${newLineSplit.filter((word) => atRegex.test(word))[0]}</a>`;\r\n            } else {\r\n              return word;\r\n            }\r\n          })\r\n          .join(\"\\n\");\r\n      default:\r\n        return str;\r\n    }\r\n  });\r\n  return embedArr.join(\" \");\r\n};\r\n\r\nonMounted(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.addEventListener(\r\n      \"click\",\r\n      function handleClick(e) {\r\n        e.stopPropagation();\r\n        app.viewUserProfile(anchor.dataset.username);\r\n      },\r\n      {\r\n        capture: false,\r\n        once: true,\r\n      }\r\n    )\r\n  );\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"textEl\" v-html=\"embedLinks()\"></div>\r\n</template>\r\n\r\n<style scoped>\r\na {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n",
    "import script from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./EmbeddedText.vue?vue&type=style&index=0&id=6a7454c8&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6a7454c8\"]])\n\nexport default __exports__",
    "<script setup>\r\nimport { ref, defineProps, computed, onMounted, onBeforeUnmount } from \"vue\";\r\nimport dayjs from \"dayjs\";\r\nimport ProfilePicture from \"./ProfilePicture.vue\";\r\nimport EmbeddedText from \"./EmbeddedText.vue\";\r\nimport formatDateMixin from \"@/mixins/formatDateMixin.js\";\r\nimport { getMediaClass } from \"@/mixins/utilities.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({\r\n  id: String,\r\n  user: Object, // id, name, username, avatarUrl\r\n  tweet: Object,\r\n  type: String, // status, retweet, reply\r\n  retweetedBy: String,\r\n  replyingTo: String,\r\n  isPreviousReply: Boolean, // render gray line for tweet thread\r\n  isNewNotification: Boolean, // highlight if new notification\r\n});\r\n\r\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\r\ndayjs.extend(relativeTime);\r\nlet timer = null;\r\n\r\nconst isTweetMenuOpen = ref(false);\r\nconst currentTime = ref(dayjs().toISOString());\r\nconst getTimeSinceCreation = ref(\r\n  formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n);\r\nconst isLiked = computed(() => tweets.hasLiked(props.tweet.id, users.currentId));\r\nconst isRetweeted = computed(() =>\r\n  tweets.hasRetweeted(props.tweet.id, users.currentId)\r\n);\r\n\r\nconst toggleTweetMenu = () => {\r\n  if (!users.currentUser) return;\r\n  isTweetMenuOpen.value = !isTweetMenuOpen.value;\r\n};\r\n\r\nconst deleteTweet = () => {\r\n  tweets.removeTweet(props.id, props.user.id);\r\n};\r\n\r\nconst toggleLike = () => {\r\n  if (!isLiked.value) {\r\n    tweets.addLike(props.id, users.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeLike(props.id, users.currentId);\r\n  }\r\n};\r\nconst toggleRetweet = () => {\r\n  if (!isRetweeted.value) {\r\n    tweets.addRetweet(props.id, users.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeRetweet(props.id, users.currentId);\r\n  }\r\n};\r\nconst setReply = () => {\r\n  app.setModalType(\"reply\");\r\n  app.setModalReply(props.user.id, props.id);\r\n  app.toggleModal();\r\n};\r\nconst shareTweet = () => {\r\n  app.toast(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(`${window.location.host}/status/${props.id}`);\r\n};\r\n\r\nonMounted(() => {\r\n  // update tweet time every 30s (if tweet isn't a day old);\r\n  if (dayjs(currentTime.value).diff(dayjs(props.tweet.timestamp), \"hour\") > 23)\r\n    return;\r\n  timer = setInterval(() => {\r\n    if (\r\n      getTimeSinceCreation.value !==\r\n      formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n    ) {\r\n      getTimeSinceCreation.value = formatDateMixin.formatTweetDate(\r\n        props.tweet.timestamp,\r\n        currentTime.value\r\n      );\r\n    }\r\n  }, 30000);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  clearInterval(timer);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"tweet-container\"\r\n    :class=\"{ border: !isPreviousReply, new: isNewNotification }\"\r\n    @click=\"app.viewTweet(props.id)\"\r\n  >\r\n    <div\r\n      class=\"user-retweet gray-text\"\r\n      v-if=\"props.type === 'retweet' && props.retweetedBy\"\r\n    >\r\n      <v-icon name=\"la-retweet-solid\" scale=\"0.89\" fill=\"#ffffff80\" />\r\n      {{ props.retweetedBy }}\r\n      Retweeted\r\n    </div>\r\n    <div class=\"tweet-body\">\r\n      <div class=\"profile-pic-container\">\r\n        <ProfilePicture\r\n          :url=\"props.user.avatarUrl\"\r\n          :size=\"48\"\r\n          @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n        />\r\n        <div class=\"gray-line\" v-if=\"isPreviousReply\"></div>\r\n      </div>\r\n      <div class=\"tweet-data\">\r\n        <div class=\"user-info-and-btn\">\r\n          <div class=\"user-info-wrapper\">\r\n            <span\r\n              class=\"display-name\"\r\n              @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n              ><a>{{ props.user.name }}</a></span\r\n            >\r\n            <span\r\n              class=\"username gray-text\"\r\n              @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n              ><a>@{{ props.user.username }}</a></span\r\n            >\r\n            <span class=\"separator gray-text\">·</span>\r\n            <span class=\"tweet-time gray-text\">{{ getTimeSinceCreation }}</span>\r\n          </div>\r\n          <span\r\n            class=\"tweet-action-icon extra-btn\"\r\n            @click.stop=\"toggleTweetMenu\"\r\n            ><v-icon name=\"hi-dots-horizontal\" scale=\"1.0\" fill=\"#ffffff80\" />\r\n            <div v-if=\"isTweetMenuOpen\" class=\"overlay\"></div>\r\n            <div v-if=\"isTweetMenuOpen\" class=\"tweet-menu-container\">\r\n              <ul class=\"tweet-menu-list\">\r\n                <li\r\n                  class=\"tweet-menu-item delete-tweet\"\r\n                  v-if=\"\r\n                    users.currentId == props.user.id || users.currentUser.isAdmin\r\n                  \"\r\n                  @click=\"deleteTweet\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon name=\"bi-trash\" scale=\"1.1\" fill=\"red\" /></span\r\n                  >Delete\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.canFollow(users.currentUser, props.user.id)\"\r\n                  @click=\"users.followUser(users.currentId, props.user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-follow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Follow @{{ props.user.username }}\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.canUnfollow(users.currentUser, props.user.id)\"\r\n                  @click=\"users.unfollowUser(users.currentId, props.user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-unfollow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Unfollow @{{ props.user.username }}\r\n                </li>\r\n                <button class=\"cancel-btn\">Cancel</button>\r\n              </ul>\r\n            </div></span\r\n          >\r\n        </div>\r\n        <div class=\"tweet-content\">\r\n          <div\r\n            class=\"replying-to\"\r\n            v-if=\"props.tweet.type === 'reply' && props.tweet.replyingToTweet\"\r\n          >\r\n            <span class=\"gray-text\">Replying to </span>\r\n            <a\r\n              class=\"blue-link\"\r\n              @click.stop=\"app.viewUserProfile(props.replyingTo)\"\r\n              >@{{ props.replyingTo }}</a\r\n            >\r\n          </div>\r\n          <div class=\"tweet-text\">\r\n            <EmbeddedText :text=\"props.tweet.text\" />\r\n          </div>\r\n          <div\r\n            class=\"tweet-media\"\r\n            :class=\"[getMediaClass(props.tweet.media)]\"\r\n            v-if=\"props.tweet.media.length > 0\"\r\n          >\r\n            <div\r\n              class=\"image-preview-wrapper\"\r\n              v-for=\"img in props.tweet.media\"\r\n              :key=\"props.tweet.media.indexOf(img)\"\r\n            >\r\n              <img :src=\"img\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"tweet-actions-wrapper\">\r\n          <span class=\"tweet-metrics\">\r\n            <span class=\"tweet-action-icon reply-btn\" @click.stop=\"setReply\"\r\n              ><v-icon name=\"fa-regular-comment\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric reply-metric gray-text\">{{\r\n              props.tweet.repliesFrom.length > 0\r\n                ? props.tweet.repliesFrom.length\r\n                : \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon retweet-btn\"\r\n              :class=\"{ retweeted: isRetweeted }\"\r\n              @click.stop=\"toggleRetweet\"\r\n              ><v-icon name=\"la-retweet-solid\" scale=\"1.15\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric retweet-metric gray-text\">{{\r\n              props.tweet.retweetCount || \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon like-btn\"\r\n              :class=\"{ liked: isLiked }\"\r\n              @click.stop=\"toggleLike\"\r\n              ><v-icon name=\"fa-regular-heart\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric like-metric gray-text\">{{\r\n              props.tweet.likeCount || \"\"\r\n            }}</span>\r\n          </span>\r\n          <span\r\n            class=\"tweet-action-icon share-tweet-btn\"\r\n            @click.stop=\"shareTweet\"\r\n            ><v-icon name=\"gi-share\" scale=\"1.0\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.blue-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.blue-link:focus {\r\n  outline: 0;\r\n}\r\n\r\n.tweet-container {\r\n  padding: 0.75rem 1rem 0 1rem;\r\n  width: 598px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  cursor: pointer;\r\n  transition: background-color 0.15s ease;\r\n}\r\n\r\n.border {\r\n  border-top: rgba(255, 255, 255, 0.25) 1px solid;\r\n}\r\n\r\n.tweet-container.new {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.tweet-container:hover {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.user-retweet {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding-left: 10%;\r\n  margin-bottom: 3px;\r\n  gap: 6px;\r\n}\r\n\r\n.tweet-body {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 1rem;\r\n}\r\n\r\n.profile-pic-container {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-self: stretch;\r\n  align-items: center;\r\n}\r\n\r\n.gray-line {\r\n  background-color: rgba(255, 255, 255, 0.25);\r\n  width: 2px;\r\n  height: 100%;\r\n  position: relative;\r\n  margin: auto;\r\n}\r\n\r\n.tweet-data {\r\n  width: 100%;\r\n}\r\n\r\n.user-info-and-btn {\r\n  width: 100%;\r\n  max-width: 505px;\r\n  height: 1rem;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.user-info-wrapper {\r\n  height: fit-content;\r\n  display: flex;\r\n  max-width: 93%;\r\n  width: 60vw;\r\n  flex-grow: 1;\r\n  column-gap: 5px;\r\n}\r\n\r\n.display-name,\r\n.username {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  min-width: 0px;\r\n  width: 100%;\r\n  max-width: fit-content;\r\n  display: inline-block;\r\n}\r\n\r\n.display-name a {\r\n  color: white;\r\n}\r\n\r\n.tweet-time {\r\n  flex-shrink: 0;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tweet-text {\r\n  word-break: break-word;\r\n  word-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.username a {\r\n  vertical-align: center;\r\n  color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.tweet-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.replying-to {\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-actions-wrapper {\r\n  max-width: 425px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-action-icon {\r\n  width: 34px;\r\n  height: 34px;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.extra-btn {\r\n  position: relative;\r\n  left: 8px;\r\n}\r\n\r\n.tweet-action-icon,\r\n.tweet-action-icon svg,\r\n.tweet-metric {\r\n  transition-property: color, background-color, fill;\r\n  transition-duration: 0.15s;\r\n  transition-timing-function: ease;\r\n}\r\n\r\n.reply-btn:hover,\r\n.share-tweet-btn:hover,\r\n.extra-btn:hover {\r\n  background-color: rgba(0, 132, 255, 0.233);\r\n}\r\n\r\n.reply-btn:hover svg,\r\n.share-tweet-btn:hover svg,\r\n.extra-btn:hover > svg,\r\n.reply-btn:hover + .reply-metric {\r\n  color: rgb(20, 181, 245);\r\n  fill: rgb(20, 181, 245);\r\n}\r\n\r\n.retweet-btn:hover {\r\n  background-color: rgba(0, 255, 191, 0.158);\r\n}\r\n\r\n.retweet-btn:hover svg,\r\n.retweet-btn.retweeted svg,\r\n.retweet-btn:hover + .retweet-metric,\r\n.retweet-btn.retweeted + .retweet-metric {\r\n  color: rgb(16, 211, 169);\r\n  fill: rgb(16, 211, 169);\r\n}\r\n\r\n.like-btn:hover {\r\n  background-color: rgba(255, 0, 64, 0.233);\r\n}\r\n\r\n.like-btn:hover svg,\r\n.like-btn.liked svg,\r\n.like-btn:hover + .like-metric,\r\n.like-btn.liked + .like-metric {\r\n  color: rgb(226, 28, 104);\r\n  fill: rgb(226, 28, 104);\r\n}\r\n\r\nsvg {\r\n  z-index: 0;\r\n}\r\n\r\n.tweet-metrics {\r\n  user-select: none;\r\n  position: relative;\r\n  left: -8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.tweet-metric {\r\n  width: 32px;\r\n  position: relative;\r\n  left: 0px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.tweet-media {\r\n  max-width: 100%;\r\n  width: fit-content;\r\n  margin-top: 0.9rem;\r\n  border: rgba(255, 255, 255, 0.25) 1px solid;\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-media img,\r\n.tweet-media div {\r\n  position: relative;\r\n  background-size: cover;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  max-width: 100%;\r\n  height: 100%;\r\n  max-height: 510px;\r\n  object-fit: cover;\r\n}\r\n\r\n.two-img,\r\n.three-img,\r\n.four-img {\r\n  display: grid;\r\n  gap: 2px;\r\n  grid-template-columns: 50% 50%;\r\n  max-height: 285px;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.three-img {\r\n  grid-template-columns: 50% 50%;\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas:\r\n    \"first second\"\r\n    \"first third\";\r\n}\r\n\r\n.three-img > :first-child {\r\n  grid-area: first;\r\n}\r\n\r\n.three-img > :nth-child(2) {\r\n  grid-area: second;\r\n}\r\n\r\n.three-img > :last-child {\r\n  grid-area: third;\r\n}\r\n\r\n.four-img {\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas: none;\r\n}\r\n\r\n.three-img img,\r\n.four-img img {\r\n  width: 100%;\r\n}\r\n\r\n.tweet-menu-container {\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 6px rgba(255, 255, 255, 0.3);\r\n  color: white;\r\n  position: absolute;\r\n  min-width: 150px;\r\n  width: max-content;\r\n  height: fit-content;\r\n  z-index: 5;\r\n  right: 8px;\r\n  top: 8px;\r\n  cursor: default;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-menu-container li {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 0.7em;\r\n  text-align: center;\r\n}\r\n\r\n.tweet-menu-container li:hover {\r\n  background-color: rgba(255, 255, 255, 0.137);\r\n}\r\n\r\n.tweet-menu-list {\r\n  margin: 0;\r\n}\r\n\r\n.tweet-menu-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 4;\r\n  cursor: default;\r\n}\r\n\r\n.delete-tweet {\r\n  color: red;\r\n}\r\n\r\n.cancel-btn {\r\n  display: none;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n",
    "import script from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetCard.vue?vue&type=style&index=0&id=4cd139b3&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"
  ],
  "names": [
    "tweets",
    "useTweetStore",
    "app",
    "useAppStore",
    "users",
    "useUsersStore",
    "isTweetMenuOpen",
    "ref",
    "tweetContainer",
    "isLiked",
    "computed",
    "hasLiked",
    "props",
    "tweet",
    "id",
    "currentId",
    "isRetweeted",
    "hasRetweeted",
    "toggleModal",
    "type",
    "setModalType",
    "toggleTweetMenu",
    "currentUser",
    "value",
    "deleteTweet",
    "routeTweetId",
    "replyingToTweet",
    "viewTweet",
    "removeTweet",
    "user",
    "toggleLike",
    "removeLike",
    "addLike",
    "retweetedBy",
    "toggleRetweet",
    "removeRetweet",
    "addRetweet",
    "setReply",
    "setModalReply",
    "shareTweet",
    "toast",
    "navigator",
    "clipboard",
    "writeText",
    "window",
    "location",
    "host",
    "__exports__",
    "store",
    "getTweet",
    "previousTweet",
    "previousTweets",
    "replies",
    "repliesFrom",
    "map",
    "fetchPreviousTweets",
    "currentTweet",
    "lastTweet",
    "unshift",
    "Error",
    "watch",
    "viewTweetId",
    "onMounted",
    "textEl",
    "embedLinks",
    "text",
    "length",
    "embedArr",
    "split",
    "str",
    "newLineSplit",
    "urlRegex",
    "hashtagRegex",
    "some",
    "word",
    "atRegex",
    "replace",
    "filter",
    "join",
    "anchors",
    "querySelectorAll",
    "Array",
    "from",
    "forEach",
    "anchor",
    "addEventListener",
    "e",
    "stopPropagation",
    "viewUserProfile",
    "dataset",
    "username",
    "capture",
    "once",
    "relativeTime",
    "require",
    "dayjs",
    "timer",
    "currentTime",
    "toISOString",
    "getTimeSinceCreation",
    "formatDateMixin",
    "timestamp",
    "diff",
    "setInterval",
    "onBeforeUnmount",
    "clearInterval"
  ],
  "sourceRoot": ""
}
