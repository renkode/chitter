{"version":3,"file":"js/633.524413f3.js","mappings":"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","sources":["webpack://chitter/./src/components/subcomponents/TweetCardFull.vue","webpack://chitter/./src/components/subcomponents/TweetCardFull.vue?588a","webpack://chitter/./src/components/TweetView.vue","webpack://chitter/./src/components/TweetView.vue?658b","webpack://chitter/./src/components/subcomponents/EmbeddedText.vue","webpack://chitter/./src/components/subcomponents/EmbeddedText.vue?411b","webpack://chitter/./src/components/subcomponents/TweetCard.vue","webpack://chitter/./src/components/subcomponents/TweetCard.vue?5deb"],"sourcesContent":["<script setup>\r\nimport { ref, computed, defineProps } from \"vue\";\r\nimport ProfilePicture from \"./ProfilePicture.vue\";\r\nimport EmbeddedText from \"./EmbeddedText.vue\";\r\nimport formatDateMixin from \"@/mixins/formatDateMixin.js\";\r\nimport { getMediaClass } from \"@/mixins/utilities.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport { getSingular } from \"@/mixins/utilities\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({\r\n  id: String,\r\n  user: Promise,\r\n  tweet: Object,\r\n  replyingTo: [String, Promise],\r\n  retweetedBy: String,\r\n});\r\n\r\nconst user = ref(await props.user);\r\nconst replyingTo = ref(await props.replyingTo);\r\nconst isTweetMenuOpen = ref(false);\r\nconst tweetContainer = ref(null);\r\n\r\nconst likes = ref(props.tweet.likeCount);\r\nconst isLiked = ref(await tweets.hasLiked(props.id, users.currentId));\r\nconst retweets = ref(props.tweet.retweetCount);\r\nconst isRetweeted = ref(await tweets.hasRetweeted(props.id, users.currentId));\r\nconst canFollow = computed(() => users.canFollow(user.value.id));\r\n\r\nconst toggleTweetMenu = () => {\r\n  if (!users.currentId) return;\r\n  isTweetMenuOpen.value = !isTweetMenuOpen.value;\r\n};\r\n\r\nconst deleteTweet = () => {\r\n  if (!users.currentId) return;\r\n  if (app.routeTweetId == props.id) {\r\n    if (props.tweet.replyingToTweet) app.viewTweet(props.tweet.replyingToTweet);\r\n  } else {\r\n    app.viewTweet();\r\n  }\r\n  tweets.removeTweet(props.id, user.value.id);\r\n};\r\n\r\nconst toggleLike = () => {\r\n  if (!users.currentId) return;\r\n  if (!isLiked.value) {\r\n    tweets.addLike(props.id, users.currentId, props.retweetedBy);\r\n    likes.value++;\r\n    isLiked.value = true;\r\n  } else {\r\n    tweets.removeLike(props.id, users.currentId, user.value.id);\r\n    likes.value--;\r\n    isLiked.value = false;\r\n  }\r\n};\r\nconst toggleRetweet = () => {\r\n  if (!users.currentId) return;\r\n  if (!isRetweeted.value) {\r\n    tweets.addRetweet(props.id, users.currentId, props.retweetedBy);\r\n    retweets.value++;\r\n    isRetweeted.value = true;\r\n  } else {\r\n    tweets.removeRetweet(props.id, users.currentId, user.value.id);\r\n    retweets.value--;\r\n    isRetweeted.value = false;\r\n  }\r\n};\r\nconst setReply = () => {\r\n  if (!users.currentId) return;\r\n  app.setModalType(\"reply\");\r\n  app.setModalReply(user.value.id, props.id);\r\n  app.toggleModal();\r\n};\r\nconst shareTweet = () => {\r\n  app.toast(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(`${window.location.host}/status/${props.id}`);\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"tweet-container\" ref=\"tweetContainer\">\r\n    <div class=\"user-retweet gray-text\" v-if=\"props.retweetedBy\">\r\n      <v-icon name=\"la-retweet-solid\" scale=\"0.89\" fill=\"#ffffff80\" />\r\n      {{ props.retweetedBy }}\r\n      Retweeted\r\n    </div>\r\n    <div class=\"tweet-body\">\r\n      <div class=\"profile-pic-and-user\">\r\n        <div class=\"profile-pic-container\">\r\n          <ProfilePicture\r\n            :url=\"user.avatarUrl\"\r\n            :size=\"48\"\r\n            @click.stop=\"app.viewUserProfile(user.username)\"\r\n          />\r\n        </div>\r\n        <div class=\"tweet-data\">\r\n          <div class=\"user-info-and-btn\">\r\n            <div class=\"user-info-wrapper\">\r\n              <span\r\n                class=\"display-name\"\r\n                @click.stop=\"app.viewUserProfile(user.username)\"\r\n                ><a>{{ user.name }}</a></span\r\n              >\r\n              <span\r\n                class=\"username gray-text\"\r\n                @click.stop=\"app.viewUserProfile(user.username)\"\r\n                ><a>@{{ user.username }}</a></span\r\n              >\r\n            </div>\r\n            <span\r\n              class=\"tweet-action-icon extra-btn\"\r\n              @click.stop=\"toggleTweetMenu\"\r\n              ><v-icon name=\"hi-dots-horizontal\" scale=\"1.0\" fill=\"#ffffff80\" />\r\n              <div v-if=\"isTweetMenuOpen\" class=\"overlay\"></div>\r\n              <div v-if=\"isTweetMenuOpen\" class=\"tweet-menu-container\">\r\n                <ul class=\"tweet-menu-list\">\r\n                  <li\r\n                    class=\"tweet-menu-item delete-tweet\"\r\n                    v-if=\"\r\n                      users.currentId == user.id || users.currentUser.isAdmin\r\n                    \"\r\n                    @click=\"deleteTweet\"\r\n                  >\r\n                    <span class=\"tweet-menu-icon\"\r\n                      ><v-icon name=\"bi-trash\" scale=\"1.1\" fill=\"red\" /></span\r\n                    >Delete\r\n                  </li>\r\n                  <li\r\n                    class=\"tweet-menu-item\"\r\n                    v-if=\"users.currentId !== user.id && canFollow\"\r\n                    @click=\"users.followUser(user.id)\"\r\n                  >\r\n                    <span class=\"tweet-menu-icon\"\r\n                      ><v-icon\r\n                        name=\"co-user-follow\"\r\n                        scale=\"1.1\"\r\n                        fill=\"#ffffff80\" /></span\r\n                    >Follow @{{ user.username }}\r\n                  </li>\r\n                  <li\r\n                    class=\"tweet-menu-item\"\r\n                    v-if=\"users.currentId !== user.id && !canFollow\"\r\n                    @click=\"users.unfollowUser(user.id)\"\r\n                  >\r\n                    <span class=\"tweet-menu-icon\"\r\n                      ><v-icon\r\n                        name=\"co-user-unfollow\"\r\n                        scale=\"1.1\"\r\n                        fill=\"#ffffff80\" /></span\r\n                    >Unfollow @{{ user.username }}\r\n                  </li>\r\n                  <button class=\"cancel-btn\">Cancel</button>\r\n                </ul>\r\n              </div></span\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"tweet-content\">\r\n        <div\r\n          class=\"replying-to\"\r\n          v-if=\"props.tweet.type === 'reply' && props.tweet.replyingToTweet\"\r\n        >\r\n          <span class=\"gray-text\">Replying to </span>\r\n          <a class=\"blue-link\" @click.stop=\"app.viewUserProfile(replyingTo)\"\r\n            >@{{ replyingTo }}</a\r\n          >\r\n        </div>\r\n        <div class=\"tweet-text\"><EmbeddedText :text=\"props.tweet.text\" /></div>\r\n        <div\r\n          class=\"tweet-media\"\r\n          :class=\"[getMediaClass(props.tweet.media)]\"\r\n          v-if=\"props.tweet.media.length > 0\"\r\n        >\r\n          <div\r\n            class=\"image-preview-wrapper\"\r\n            v-for=\"img in props.tweet.media\"\r\n            :key=\"props.tweet.media.indexOf(img)\"\r\n          >\r\n            <img :src=\"img\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"date-and-time\">\r\n        <span class=\"tweet-time gray-text\">{{\r\n          formatDateMixin.formatTime(props.tweet.timestamp)\r\n        }}</span>\r\n        <span class=\"separator gray-text\">·</span>\r\n        <span class=\"tweet-time gray-text\">{{\r\n          formatDateMixin.formatFullDate(props.tweet.timestamp)\r\n        }}</span>\r\n      </div>\r\n\r\n      <div class=\"tweet-metrics-wrapper\" v-if=\"retweets > 0 || likes > 0\">\r\n        <span\r\n          class=\"tweet-metric\"\r\n          v-if=\"retweets > 0\"\r\n          @click=\"app.toggleModal('retweet-list')\"\r\n          ><strong>{{ retweets }}</strong>\r\n          <span class=\"gray-text\">{{\r\n            getSingular(\" Retweets\", retweets)\r\n          }}</span></span\r\n        >\r\n        <span\r\n          class=\"tweet-metric\"\r\n          v-if=\"likes > 0\"\r\n          @click=\"app.toggleModal('like-list')\"\r\n          ><strong>{{ likes }}</strong>\r\n          <span class=\"gray-text\">{{\r\n            getSingular(\" Likes\", likes)\r\n          }}</span></span\r\n        >\r\n      </div>\r\n\r\n      <div class=\"tweet-actions-wrapper\">\r\n        <div class=\"tweet-action-container\">\r\n          <span class=\"tweet-action-icon reply-btn\" @click.stop=\"setReply\"\r\n            ><v-icon name=\"fa-regular-comment\" scale=\"1.3\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n        <div class=\"tweet-action-container\">\r\n          <span\r\n            class=\"tweet-action-icon retweet-btn\"\r\n            :class=\"{ retweeted: isRetweeted }\"\r\n            @click.stop=\"toggleRetweet\"\r\n            ><v-icon name=\"la-retweet-solid\" scale=\"1.45\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n        <div class=\"tweet-action-container\">\r\n          <span\r\n            class=\"tweet-action-icon like-btn\"\r\n            :class=\"{ liked: isLiked }\"\r\n            @click.stop=\"toggleLike\"\r\n            ><v-icon name=\"fa-regular-heart\" scale=\"1.3\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n        <div class=\"tweet-action-container\">\r\n          <span\r\n            class=\"tweet-action-icon share-tweet-btn\"\r\n            @click.stop=\"shareTweet\"\r\n            ><v-icon name=\"gi-share\" scale=\"1.3\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.tweet-container {\r\n  cursor: auto;\r\n  border-top: 0;\r\n}\r\n\r\n.tweet-container:hover {\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n.tweet-body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0;\r\n}\r\n\r\n.profile-pic-and-user {\r\n  width: 100%;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.profile-pic-container {\r\n  height: 100%;\r\n  width: fit-content;\r\n}\r\n\r\n.user-info-and-btn {\r\n  width: 100%;\r\n  max-width: 505px;\r\n  height: 100%;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.user-info-wrapper {\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: center;\r\n}\r\n\r\n.display-name,\r\n.username {\r\n  cursor: pointer;\r\n}\r\n\r\n.tweet-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 0;\r\n  margin-top: 0.7rem;\r\n}\r\n\r\n.tweet-text {\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.date-and-time {\r\n  margin: 0.8rem 0;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.tweet-metrics-wrapper {\r\n  width: 100%;\r\n  height: 54px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  border-top: rgba(255, 255, 255, 0.2) 1px solid;\r\n}\r\n\r\n.tweet-actions-wrapper {\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0.6rem 0 0.5rem 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-top: rgba(255, 255, 255, 0.2) 1px solid;\r\n}\r\n\r\n.tweet-action-container {\r\n  flex: 1;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.tweet-action-icon {\r\n  cursor: pointer;\r\n  width: 40px;\r\n  height: 40px;\r\n}\r\n\r\n.tweet-metrics-wrapper {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.tweet-metric {\r\n  width: fit-content;\r\n  position: relative;\r\n  left: 0px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.tweet-metric:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>\r\n","import script from \"./TweetCardFull.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetCardFull.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetCardFull.vue?vue&type=style&index=0&id=9d3f1c76&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-9d3f1c76\"]])\n\nexport default __exports__","<script setup>\r\nimport {\r\n  defineProps,\r\n  ref,\r\n  computed,\r\n  watch,\r\n  onMounted,\r\n  onBeforeMount,\r\n} from \"vue\";\r\nimport TweetCard from \"./subcomponents/TweetCard.vue\";\r\nimport TweetCardFull from \"./subcomponents/TweetCardFull.vue\";\r\nimport LoadSpinner from \"./subcomponents/LoadSpinner.vue\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\n\r\n// didn't use tweetlist since deleted tweets would have to be handled differently\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst store = useTweetStore();\r\nconst props = defineProps([\"id\"]);\r\n\r\nconst pending = ref(true);\r\nconst viewingTweet = ref(await store.getTweet(props.id));\r\nconst tweets = computed(() => store.tweets);\r\n\r\n// kinda like a linked list\r\nasync function fetchPreviousTweets() {\r\n  const prev = [];\r\n  if (!viewingTweet.value) return;\r\n  let currentTweet = viewingTweet.value;\r\n  while (currentTweet.replyingToTweet) {\r\n    try {\r\n      let lastTweet = await store.getTweet(currentTweet.replyingToTweet);\r\n      if (!lastTweet) {\r\n        prev.unshift({ id: null }); // deleted tweet\r\n        break;\r\n      }\r\n      prev.unshift(\r\n        Object.assign(lastTweet, {\r\n          isPreviousReply: true,\r\n          replyingToUser: await users.getUsername(lastTweet.authorId),\r\n          user: await users.getUserProps(lastTweet.authorId), // for timing issues\r\n        })\r\n      );\r\n      currentTweet = lastTweet;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return prev;\r\n}\r\n\r\nasync function fetchRepliesToCurrentTweet() {\r\n  if (!viewingTweet.value) return;\r\n  return Promise.all(\r\n    viewingTweet.value.repliesFrom.map((id) => store.getTweet(id))\r\n  );\r\n}\r\n\r\nasync function updateTweets() {\r\n  if (!viewingTweet.value) return [null];\r\n  const replyingToUser = await users.getUsername(viewingTweet.value.authorId);\r\n  return store.setTweets([\r\n    ...(await fetchPreviousTweets()),\r\n    Object.assign(viewingTweet.value, {\r\n      replyingToUser,\r\n    }),\r\n    ...(await fetchRepliesToCurrentTweet()),\r\n  ]);\r\n}\r\n\r\n// refresh whenever current tweet or previous tweet change/get deleted\r\nwatch(\r\n  () => props.id,\r\n  async () => {\r\n    pending.value = true;\r\n    viewingTweet.value = await store.getTweet(props.id);\r\n    await updateTweets();\r\n    pending.value = false;\r\n  }\r\n);\r\n\r\nonBeforeMount(() => {\r\n  store.setTweets([]);\r\n});\r\n\r\nonMounted(async () => {\r\n  if (viewingTweet.value) {\r\n    await updateTweets();\r\n  }\r\n  pending.value = false;\r\n});\r\n\r\n// NOTE: passing a promise to replyToUser/user will cause the tweets to pop in whenever they resolve, and that looks super ugly\r\n</script>\r\n\r\n<template>\r\n  <div class=\"tweet-list-container\" v-if=\"!pending && viewingTweet\">\r\n    <TransitionGroup name=\"fade\" mode=\"out-in\">\r\n      <template v-for=\"(tweet, index) in tweets\">\r\n        <template v-if=\"!tweet || !tweet.id\">\r\n          <div class=\"tweet-container\" :key=\"index\">\r\n            <div class=\"deleted-tweet\">\r\n              <span class=\"gray-text\">Tweet has been deleted.</span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <template v-else-if=\"tweet.isPreviousReply\">\r\n          <TweetCard\r\n            :key=\"tweet.id\"\r\n            :id=\"tweet.id\"\r\n            :user=\"tweet.user\"\r\n            :tweet=\"tweet\"\r\n            :type=\"tweet.type\"\r\n            :replyingTo=\"tweet.replyingToUser\"\r\n            :isPreviousReply=\"true\"\r\n          />\r\n        </template>\r\n\r\n        <template v-else-if=\"tweet.id === props.id\">\r\n          <TweetCardFull\r\n            :key=\"tweet.id\"\r\n            :id=\"tweet.id\"\r\n            :user=\"users.getUserProps(tweet.authorId)\"\r\n            :tweet=\"tweet\"\r\n            :type=\"tweet.type\"\r\n            :replyingTo=\"tweet.replyingToUser\"\r\n          />\r\n        </template>\r\n        <template v-else>\r\n          <TweetCard\r\n            :key=\"tweet.id\"\r\n            :id=\"tweet.id\"\r\n            :user=\"users.getUserProps(tweet.authorId)\"\r\n            :tweet=\"tweet\"\r\n            :type=\"tweet.type\"\r\n            :replyingTo=\"viewingTweet.replyingToUser\"\r\n            :isPreviousReply=\"false\"\r\n          />\r\n        </template>\r\n      </template>\r\n    </TransitionGroup>\r\n  </div>\r\n  <LoadSpinner v-else-if=\"pending\" />\r\n  <div class=\"error gray-text\" v-else>Tweet does not exist.</div>\r\n</template>\r\n\r\n<style scoped>\r\n.fade-enter-active {\r\n  transition: opacity 0.15s ease;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n\r\n.deleted-tweet {\r\n  width: 100%;\r\n  height: 3rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding-bottom: 0.75rem;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-list-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n","import script from \"./TweetView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetView.vue?vue&type=style&index=0&id=23e3a11c&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-23e3a11c\"]])\n\nexport default __exports__","<script setup>\r\nimport {\r\n  ref,\r\n  defineProps,\r\n  onMounted,\r\n  onBeforeUpdate,\r\n  onUpdated,\r\n  onBeforeUnmount,\r\n} from \"vue\";\r\nimport { urlRegex, hashtagRegex, atRegex } from \"@/mixins/utilities.js\";\r\nimport { useAppStore } from \"@/stores/app\";\r\n\r\nconst props = defineProps([\"text\"]);\r\nconst app = useAppStore();\r\nconst textEl = ref(null);\r\n\r\nfunction embedLinks() {\r\n  if (!props.text || props.text.length === 0) return;\r\n\r\n  const embedArr = props.text.split(\" \").map((str) => {\r\n    const newLineSplit = str.split(/\\r?\\n/);\r\n    switch (true) {\r\n      case urlRegex.test(str):\r\n        return `<a class=\"blue-link\" href=\"${str}\" target=\"_blank\">${str}</a>`;\r\n      case hashtagRegex.test(str):\r\n        return `<a class=\"blue-link\">${str}</a>`;\r\n      case newLineSplit.some((word) => atRegex.test(word)): // SPLIT BY NEWLINE\r\n        return newLineSplit\r\n          .map((word) => {\r\n            if (atRegex.test(word)) {\r\n              return `<a class=\"blue-link user-link\" data-username=${str.replace(\r\n                \"@\",\r\n                \"\"\r\n              )}>${newLineSplit.filter((word) => atRegex.test(word))[0]}</a>`;\r\n            } else {\r\n              return word;\r\n            }\r\n          })\r\n          .join(\"\\n\");\r\n      default:\r\n        return str;\r\n    }\r\n  });\r\n  return embedArr.join(\" \");\r\n}\r\n\r\nconst handleClick = (e) => {\r\n  e.stopPropagation();\r\n  app.viewUserProfile(e.currentTarget.dataset.username);\r\n};\r\n\r\nonMounted(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.addEventListener(\"click\", handleClick)\r\n  );\r\n});\r\n\r\n// edge case: user edits profile bio\r\nonBeforeUpdate(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.removeEventListener(\"click\", handleClick)\r\n  );\r\n});\r\n\r\nonUpdated(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.addEventListener(\"click\", handleClick)\r\n  );\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.removeEventListener(\"click\", handleClick)\r\n  );\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"textEl\" v-html=\"embedLinks()\"></div>\r\n</template>\r\n\r\n<style scoped>\r\na {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n","import script from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./EmbeddedText.vue?vue&type=style&index=0&id=50c560dd&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-50c560dd\"]])\n\nexport default __exports__","<script setup>\r\nimport { ref, computed, defineProps, onMounted, onBeforeUnmount } from \"vue\";\r\nimport dayjs from \"dayjs\";\r\nimport ProfilePicture from \"./ProfilePicture.vue\";\r\nimport EmbeddedText from \"./EmbeddedText.vue\";\r\nimport formatDateMixin from \"@/mixins/formatDateMixin.js\";\r\nimport { getMediaClass } from \"@/mixins/utilities.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({\r\n  id: String,\r\n  user: [Object, Promise], // id, name, username, avatarUrl\r\n  tweet: Object,\r\n  retweetedBy: String,\r\n  replyingTo: [String, Promise],\r\n  isPreviousReply: Boolean, // render gray line for tweet thread\r\n  isNewNotification: Boolean, // highlight if new notification\r\n});\r\n\r\nconst user = ref(await props.user);\r\nconst replyingTo = ref(await props.replyingTo);\r\n\r\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\r\ndayjs.extend(relativeTime);\r\nlet timer = null;\r\n\r\nconst isTweetMenuOpen = ref(false);\r\nconst currentTime = ref(dayjs().toISOString());\r\nconst getTimeSinceCreation = ref(\r\n  formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n);\r\nconst likes = ref(props.tweet.likeCount);\r\nconst isLiked = ref(await tweets.hasLiked(props.id, users.currentId));\r\nconst retweets = ref(props.tweet.retweetCount);\r\nconst isRetweeted = ref(await tweets.hasRetweeted(props.id, users.currentId));\r\nconst canFollow = computed(() => users.canFollow(user.value.id));\r\n\r\nconst toggleTweetMenu = () => {\r\n  if (!users.currentId) return;\r\n  isTweetMenuOpen.value = !isTweetMenuOpen.value;\r\n};\r\n\r\nconst deleteTweet = () => {\r\n  if (!users.currentId) return;\r\n  tweets.removeTweet(props.id, user.value.id);\r\n};\r\n\r\nconst toggleLike = () => {\r\n  if (!users.currentId) return;\r\n  if (!isLiked.value) {\r\n    tweets.addLike(props.id, users.currentId, props.retweetedBy);\r\n    likes.value++;\r\n    isLiked.value = true;\r\n  } else {\r\n    tweets.removeLike(props.id, users.currentId, user.value.id);\r\n    likes.value--;\r\n    isLiked.value = false;\r\n  }\r\n};\r\nconst toggleRetweet = () => {\r\n  if (!users.currentId) return;\r\n  if (!isRetweeted.value) {\r\n    tweets.addRetweet(props.id, users.currentId, props.retweetedBy);\r\n    retweets.value++;\r\n    isRetweeted.value = true;\r\n  } else {\r\n    tweets.removeRetweet(props.id, users.currentId, user.value.id);\r\n    retweets.value--;\r\n    isRetweeted.value = false;\r\n  }\r\n};\r\nconst setReply = () => {\r\n  if (!users.currentId) return;\r\n  app.setModalType(\"reply\");\r\n  app.setModalReply(user.value.id, props.id);\r\n  app.toggleModal();\r\n};\r\nconst shareTweet = () => {\r\n  app.toast(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(`${window.location.host}/status/${props.id}`);\r\n};\r\n\r\nonMounted(() => {\r\n  // update tweet time every 30s (if tweet isn't a day old);\r\n  if (dayjs(currentTime.value).diff(dayjs(props.tweet.timestamp), \"hour\") > 23)\r\n    return;\r\n  timer = setInterval(() => {\r\n    if (\r\n      getTimeSinceCreation.value !==\r\n      formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n    ) {\r\n      getTimeSinceCreation.value = formatDateMixin.formatTweetDate(\r\n        props.tweet.timestamp,\r\n        currentTime.value\r\n      );\r\n    }\r\n  }, 30000);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  clearInterval(timer);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"tweet-container\"\r\n    :class=\"{ border: !isPreviousReply, new: isNewNotification }\"\r\n    @click=\"app.viewTweet(props.id)\"\r\n  >\r\n    <div class=\"user-retweet gray-text\" v-if=\"props.retweetedBy\">\r\n      <v-icon name=\"la-retweet-solid\" scale=\"0.89\" fill=\"#ffffff80\" />\r\n      <span class=\"retweeted-by\">{{ props.retweetedBy }} Retweeted</span>\r\n    </div>\r\n    <div class=\"tweet-body\">\r\n      <div class=\"profile-pic-container\">\r\n        <ProfilePicture\r\n          :url=\"user.avatarUrl\"\r\n          :size=\"48\"\r\n          @click.stop=\"app.viewUserProfile(user.username)\"\r\n        />\r\n        <div class=\"gray-line\" v-if=\"isPreviousReply\"></div>\r\n      </div>\r\n      <div class=\"tweet-data\">\r\n        <div class=\"user-info-and-btn\">\r\n          <div class=\"user-info-wrapper\">\r\n            <span\r\n              class=\"display-name\"\r\n              @click.stop=\"app.viewUserProfile(user.username)\"\r\n              ><a>{{ user.name }}</a></span\r\n            >\r\n            <span\r\n              class=\"username gray-text\"\r\n              @click.stop=\"app.viewUserProfile(user.username)\"\r\n              ><a>@{{ user.username }}</a></span\r\n            >\r\n            <span class=\"separator gray-text\">·</span>\r\n            <span class=\"tweet-time gray-text\">{{ getTimeSinceCreation }}</span>\r\n          </div>\r\n          <span\r\n            class=\"tweet-action-icon extra-btn\"\r\n            @click.stop=\"toggleTweetMenu\"\r\n            ><v-icon name=\"hi-dots-horizontal\" scale=\"1.0\" fill=\"#ffffff80\" />\r\n            <div v-if=\"isTweetMenuOpen\" class=\"overlay\"></div>\r\n            <div v-if=\"isTweetMenuOpen\" class=\"tweet-menu-container\">\r\n              <ul class=\"tweet-menu-list\">\r\n                <li\r\n                  class=\"tweet-menu-item delete-tweet\"\r\n                  v-if=\"users.currentId == user.id || users.currentUser.isAdmin\"\r\n                  @click=\"deleteTweet\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon name=\"bi-trash\" scale=\"1.1\" fill=\"red\" /></span\r\n                  >Delete\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.currentId !== user.id && canFollow\"\r\n                  @click=\"users.followUser(user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-follow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Follow @{{ user.username }}\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.currentId !== user.id && !canFollow\"\r\n                  @click=\"users.unfollowUser(user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-unfollow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Unfollow @{{ user.username }}\r\n                </li>\r\n                <button class=\"cancel-btn\">Cancel</button>\r\n              </ul>\r\n            </div></span\r\n          >\r\n        </div>\r\n        <div class=\"tweet-content\">\r\n          <div\r\n            class=\"replying-to\"\r\n            v-if=\"props.tweet.type === 'reply' && props.tweet.replyingToTweet\"\r\n          >\r\n            <span class=\"gray-text\">Replying to </span>\r\n            <a class=\"blue-link\" @click.stop=\"app.viewUserProfile(replyingTo)\"\r\n              >@{{ replyingTo }}</a\r\n            >\r\n          </div>\r\n          <div class=\"tweet-text\">\r\n            <EmbeddedText :text=\"props.tweet.text\" />\r\n          </div>\r\n          <div\r\n            class=\"tweet-media\"\r\n            :class=\"[getMediaClass(props.tweet.media)]\"\r\n            v-if=\"props.tweet.media.length > 0\"\r\n          >\r\n            <div\r\n              class=\"image-preview-wrapper\"\r\n              v-for=\"img in props.tweet.media\"\r\n              :key=\"props.tweet.media.indexOf(img)\"\r\n            >\r\n              <img :src=\"img\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"tweet-actions-wrapper\">\r\n          <span class=\"tweet-metrics\">\r\n            <span class=\"tweet-action-icon reply-btn\" @click.stop=\"setReply\"\r\n              ><v-icon name=\"fa-regular-comment\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric reply-metric gray-text\">{{\r\n              props.tweet.repliesFrom.length > 0\r\n                ? props.tweet.repliesFrom.length\r\n                : \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon retweet-btn\"\r\n              :class=\"{ retweeted: isRetweeted }\"\r\n              @click.stop=\"toggleRetweet\"\r\n              ><v-icon name=\"la-retweet-solid\" scale=\"1.15\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric retweet-metric gray-text\"\r\n              ><span v-if=\"retweets > 0\">{{ retweets }}</span></span\r\n            >\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon like-btn\"\r\n              :class=\"{ liked: isLiked }\"\r\n              @click.stop=\"toggleLike\"\r\n              ><v-icon name=\"fa-regular-heart\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric like-metric gray-text\"\r\n              ><span v-if=\"likes > 0\">{{ likes }}</span></span\r\n            >\r\n          </span>\r\n          <span\r\n            class=\"tweet-action-icon share-tweet-btn\"\r\n            @click.stop=\"shareTweet\"\r\n            ><v-icon name=\"gi-share\" scale=\"1.0\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.blue-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.blue-link:focus {\r\n  outline: 0;\r\n}\r\n\r\n.tweet-container {\r\n  padding: 0.75rem 1rem 0 1rem;\r\n  width: 598px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  cursor: pointer;\r\n  transition: background-color 0.15s ease;\r\n}\r\n\r\n.border {\r\n  border-top: rgba(255, 255, 255, 0.25) 1px solid;\r\n}\r\n\r\n.tweet-container.new {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.tweet-container:hover {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.user-retweet {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding-left: 10%;\r\n  padding-bottom: 6px;\r\n  gap: 6px;\r\n}\r\n\r\n.retweeted-by {\r\n  display: flex;\r\n  justify-content: center;\r\n  height: 1.4rem;\r\n}\r\n\r\n.tweet-body {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 1rem;\r\n}\r\n\r\n.profile-pic-container {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-self: stretch;\r\n  align-items: center;\r\n}\r\n\r\n.gray-line {\r\n  background-color: rgba(255, 255, 255, 0.25);\r\n  width: 2px;\r\n  height: 100%;\r\n  position: relative;\r\n  margin: auto;\r\n  bottom: -5px;\r\n}\r\n\r\n.tweet-data {\r\n  width: 100%;\r\n}\r\n\r\n.user-info-and-btn {\r\n  width: 100%;\r\n  max-width: 505px;\r\n  height: 1rem;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.user-info-wrapper {\r\n  height: fit-content;\r\n  display: flex;\r\n  max-width: 93%;\r\n  width: 60vw;\r\n  flex-grow: 1;\r\n  column-gap: 5px;\r\n}\r\n\r\n.display-name,\r\n.username {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  min-width: 0px;\r\n  width: 100%;\r\n  max-width: fit-content;\r\n  display: inline-block;\r\n}\r\n\r\n.display-name a {\r\n  color: white;\r\n  font-weight: bold;\r\n  line-height: 1.3rem;\r\n}\r\n\r\n.tweet-time {\r\n  flex-shrink: 0;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tweet-text {\r\n  word-break: break-word;\r\n  word-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.username a {\r\n  vertical-align: center;\r\n  color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.tweet-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.replying-to {\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-actions-wrapper {\r\n  max-width: 425px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-action-icon {\r\n  width: 34px;\r\n  height: 34px;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.extra-btn {\r\n  position: relative;\r\n  left: 8px;\r\n}\r\n\r\n.tweet-action-icon,\r\n.tweet-action-icon svg,\r\n.tweet-metric {\r\n  transition-property: color, background-color, fill;\r\n  transition-duration: 0.15s;\r\n  transition-timing-function: ease;\r\n}\r\n\r\n.reply-btn:hover,\r\n.share-tweet-btn:hover,\r\n.extra-btn:hover {\r\n  background-color: rgba(0, 132, 255, 0.233);\r\n}\r\n\r\n.reply-btn:hover svg,\r\n.share-tweet-btn:hover svg,\r\n.extra-btn:hover > svg,\r\n.reply-btn:hover + .reply-metric {\r\n  color: rgb(20, 181, 245);\r\n  fill: rgb(20, 181, 245);\r\n}\r\n\r\n.retweet-btn:hover {\r\n  background-color: rgba(0, 255, 191, 0.158);\r\n}\r\n\r\n.retweet-btn:hover svg,\r\n.retweet-btn.retweeted svg,\r\n.retweet-btn:hover + .retweet-metric,\r\n.retweet-btn.retweeted + .retweet-metric {\r\n  color: rgb(16, 211, 169);\r\n  fill: rgb(16, 211, 169);\r\n}\r\n\r\n.like-btn:hover {\r\n  background-color: rgba(255, 0, 64, 0.233);\r\n}\r\n\r\n.like-btn:hover svg,\r\n.like-btn.liked svg,\r\n.like-btn:hover + .like-metric,\r\n.like-btn.liked + .like-metric {\r\n  color: rgb(226, 28, 104);\r\n  fill: rgb(226, 28, 104);\r\n}\r\n\r\nsvg {\r\n  z-index: 0;\r\n}\r\n\r\n.tweet-metrics {\r\n  user-select: none;\r\n  position: relative;\r\n  left: -8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.tweet-metric {\r\n  width: 32px;\r\n  position: relative;\r\n  left: 0px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.tweet-media {\r\n  max-width: 100%;\r\n  width: fit-content;\r\n  margin-top: 0.9rem;\r\n  border: rgba(255, 255, 255, 0.25) 1px solid;\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-media img,\r\n.tweet-media div {\r\n  position: relative;\r\n  background-size: cover;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  max-width: 100%;\r\n  height: 100%;\r\n  max-height: 510px;\r\n  object-fit: cover;\r\n}\r\n\r\n.two-img,\r\n.three-img,\r\n.four-img {\r\n  display: grid;\r\n  gap: 2px;\r\n  grid-template-columns: 50% 50%;\r\n  max-height: 285px;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.three-img {\r\n  grid-template-columns: 50% 50%;\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas:\r\n    \"first second\"\r\n    \"first third\";\r\n}\r\n\r\n.three-img > :first-child {\r\n  grid-area: first;\r\n}\r\n\r\n.three-img > :nth-child(2) {\r\n  grid-area: second;\r\n}\r\n\r\n.three-img > :last-child {\r\n  grid-area: third;\r\n}\r\n\r\n.four-img {\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas: none;\r\n}\r\n\r\n.three-img img,\r\n.four-img img {\r\n  width: 100%;\r\n}\r\n\r\n.tweet-menu-container {\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 6px rgba(255, 255, 255, 0.3);\r\n  color: white;\r\n  position: absolute;\r\n  min-width: 150px;\r\n  width: max-content;\r\n  height: fit-content;\r\n  z-index: 5;\r\n  right: 8px;\r\n  top: 8px;\r\n  cursor: default;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-menu-container li {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 0.7em;\r\n  text-align: center;\r\n}\r\n\r\n.tweet-menu-container li:hover {\r\n  background-color: rgba(255, 255, 255, 0.137);\r\n}\r\n\r\n.tweet-menu-list {\r\n  margin: 0;\r\n}\r\n\r\n.tweet-menu-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 4;\r\n  cursor: default;\r\n}\r\n\r\n.delete-tweet {\r\n  color: red;\r\n}\r\n\r\n.cancel-btn {\r\n  display: none;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n","import script from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetCard.vue?vue&type=style&index=0&id=188434f2&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["tweets","useTweetStore","app","useAppStore","users","useUsersStore","user","ref","props","replyingTo","isTweetMenuOpen","tweetContainer","likes","tweet","likeCount","isLiked","hasLiked","id","currentId","retweets","retweetCount","isRetweeted","hasRetweeted","canFollow","computed","value","toggleTweetMenu","deleteTweet","routeTweetId","replyingToTweet","viewTweet","removeTweet","toggleLike","removeLike","addLike","retweetedBy","toggleRetweet","removeRetweet","addRetweet","setReply","setModalType","setModalReply","toggleModal","shareTweet","toast","navigator","clipboard","writeText","window","location","host","__exports__","store","pending","viewingTweet","getTweet","async","fetchPreviousTweets","prev","currentTweet","lastTweet","unshift","Object","assign","isPreviousReply","replyingToUser","getUsername","authorId","getUserProps","e","console","log","fetchRepliesToCurrentTweet","Promise","all","repliesFrom","map","updateTweets","setTweets","watch","onBeforeMount","onMounted","textEl","embedLinks","text","length","embedArr","split","str","newLineSplit","urlRegex","hashtagRegex","some","word","atRegex","replace","filter","join","handleClick","stopPropagation","viewUserProfile","currentTarget","dataset","username","anchors","querySelectorAll","Array","from","forEach","anchor","addEventListener","onBeforeUpdate","removeEventListener","onUpdated","onBeforeUnmount","relativeTime","require","dayjs","timer","currentTime","toISOString","getTimeSinceCreation","formatDateMixin","timestamp","diff","setInterval","clearInterval"],"sourceRoot":""}