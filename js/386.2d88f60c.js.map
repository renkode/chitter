{
  "version": 3,
  "file": "js/386.2d88f60c.js",
  "mappings": "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",
  "sources": [
    "webpack://chitter/./src/components/lists/TweetList.vue",
    "webpack://chitter/./src/components/lists/TweetList.vue?13a8",
    "webpack://chitter/./src/components/subcomponents/EmbeddedText.vue",
    "webpack://chitter/./src/components/subcomponents/EmbeddedText.vue?411b",
    "webpack://chitter/./src/components/subcomponents/TweetCard.vue",
    "webpack://chitter/./src/components/subcomponents/TweetCard.vue?5deb"
  ],
  "sourcesContent": [
    "<script setup>\r\nimport { defineProps, computed } from \"vue\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport TweetCard from \"../subcomponents/TweetCard.vue\";\r\n\r\nconst users = useUsersStore();\r\nconst props = defineProps({ tweets: Array });\r\n/* example ( i don't like how it's structured either but whatever )\r\n{ data: tweetObj,\r\n  type: \"retweet\",\r\n  retweetedBy: \"user's name\"\r\n}*/\r\nconst tweets = computed(() =>\r\n  props.tweets.filter(\r\n    (tweet) => typeof tweet !== \"undefined\" && typeof tweet.data !== \"undefined\"\r\n  )\r\n); // FAILSAFE, weed out undefined tweets\r\n</script>\r\n\r\n<template>\r\n  <div class=\"tweet-list\">\r\n    <TransitionGroup name=\"fade-down\" v-if=\"tweets && tweets.length > 0\">\r\n      <TweetCard\r\n        v-for=\"tweet in tweets\"\r\n        :key=\"tweet.data.id\"\r\n        :id=\"tweet.data.id\"\r\n        :user=\"users.getUser(tweet.data.authorId)\"\r\n        :tweet=\"tweet.data\"\r\n        :type=\"tweet.type\"\r\n        :retweetedBy=\"tweet.retweetedBy\"\r\n        :replyingTo=\"users.getUsername(tweet.data.replyingToUser)\"\r\n      />\r\n    </TransitionGroup>\r\n    <div class=\"error gray-text\" v-else>No tweets to display</div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.fade-down-enter-active,\r\n.fade-down-leave-active {\r\n  transition: all 0.12s ease;\r\n}\r\n\r\n.fade-down-enter-from,\r\n.fade-down-leave-to {\r\n  transform: translateY(-15px);\r\n  opacity: 0;\r\n}\r\n\r\n.fade-down-leave-from {\r\n  opacity: 1;\r\n}\r\n\r\n.tweet-list {\r\n  height: fit-content;\r\n  width: 598px;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-list {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n",
    "import script from \"./TweetList.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetList.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetList.vue?vue&type=style&index=0&id=f66a305a&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__",
    "<script setup>\r\nimport { ref, defineProps, computed, onMounted, watch } from \"vue\";\r\nimport { urlRegex, hashtagRegex, atRegex } from \"@/mixins/utilities.js\";\r\nimport { useAppStore } from \"@/stores/app\";\r\n\r\nconst props = defineProps([\"text\"]);\r\nconst textEl = ref(null);\r\nconst app = useAppStore();\r\n\r\nconst embedLinks = computed(() => {\r\n  if (!props.text || props.text.length === 0) return;\r\n\r\n  const embedArr = props.text.split(\" \").map((str) => {\r\n    switch (true) {\r\n      case urlRegex.test(str):\r\n        return `<a class=\"blue-link\" href=\"${str}\" target=\"_blank\">${str}</a>`;\r\n      case hashtagRegex.test(str):\r\n        return `<a class=\"blue-link\">${str}</a>`;\r\n      case atRegex.test(str.split(/\\r?\\n/)[0]): // SPLIT BY NEWLINE\r\n        return `<a class=\"blue-link user-link\" data-username=${str.replace(\r\n          \"@\",\r\n          \"\"\r\n        )}>${str.split(/\\r?\\n/)[0]}</a>${\r\n          str.split(/\\r?\\n/).length > 1\r\n            ? \"\\n\" + str.split(/\\r?\\n/).slice(1).join(\"\\n\")\r\n            : \"\"\r\n        }`;\r\n      default:\r\n        return str;\r\n    }\r\n  });\r\n  return embedArr.join(\" \");\r\n});\r\n\r\nonMounted(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.addEventListener(\"click\", function handleClick(e) {\r\n      e.stopPropagation();\r\n      app.viewUserProfile(anchor.dataset.username);\r\n      this.removeEventListener(\"click\", handleClick);\r\n    })\r\n  );\r\n});\r\n\r\nwatch(textEl, () => {});\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"textEl\" v-html=\"embedLinks\"></div>\r\n</template>\r\n\r\n<style scoped>\r\na {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n",
    "import script from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./EmbeddedText.vue?vue&type=style&index=0&id=17b9ce1e&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-17b9ce1e\"]])\n\nexport default __exports__",
    "<script setup>\r\nimport { ref, defineProps, computed, onMounted, onUnmounted } from \"vue\";\r\nimport dayjs from \"dayjs\";\r\nimport ProfilePicture from \"./ProfilePicture.vue\";\r\nimport EmbeddedText from \"./EmbeddedText.vue\";\r\nimport formatDateMixin from \"@/mixins/formatDateMixin.js\";\r\nimport { getMediaClass } from \"@/mixins/utilities.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({\r\n  id: String,\r\n  user: Object,\r\n  tweet: Object,\r\n  type: String, // status, retweet, reply\r\n  retweetedBy: String,\r\n  replyingTo: String,\r\n  isPreviousReply: Boolean, // render gray line for tweet thread\r\n  isNotification: Boolean, // highlight if new notification\r\n});\r\n\r\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\r\ndayjs.extend(relativeTime);\r\nlet timer = null;\r\n\r\nconst isTweetMenuOpen = ref(false);\r\nconst currentTime = ref(dayjs().toISOString());\r\nconst getTimeSinceCreation = ref(\r\n  formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n);\r\nconst isLiked = computed(() => tweets.hasLiked(props.tweet.id, app.currentId));\r\nconst isRetweeted = computed(() =>\r\n  tweets.hasRetweeted(props.tweet.id, app.currentId)\r\n);\r\n\r\nconst toggleTweetMenu = () => {\r\n  isTweetMenuOpen.value = !isTweetMenuOpen.value;\r\n};\r\n\r\nconst deleteTweet = () => {\r\n  tweets.removeTweet(props.id, props.user.id);\r\n};\r\n\r\nconst toggleLike = () => {\r\n  if (!isLiked.value) {\r\n    tweets.addLike(props.id, app.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeLike(props.id, app.currentId);\r\n  }\r\n};\r\nconst toggleRetweet = () => {\r\n  if (!isRetweeted.value) {\r\n    tweets.addRetweet(props.id, app.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeRetweet(props.id, app.currentId);\r\n  }\r\n};\r\nconst setReply = () => {\r\n  app.setModalType(\"reply\");\r\n  app.setModalReply(props.user.id, props.id);\r\n  app.toggleModal();\r\n};\r\nconst shareTweet = () => {\r\n  app.toast(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(`${window.location.host}/status/${props.id}`);\r\n};\r\n\r\nonMounted(() => {\r\n  // update tweet time every 30s (if tweet isn't a day old);\r\n  if (dayjs(currentTime.value).diff(dayjs(props.tweet.timestamp), \"hour\") > 23)\r\n    return;\r\n  timer = setInterval(() => {\r\n    if (\r\n      getTimeSinceCreation.value !==\r\n      formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n    ) {\r\n      getTimeSinceCreation.value = formatDateMixin.formatTweetDate(\r\n        props.tweet.timestamp,\r\n        currentTime.value\r\n      );\r\n    }\r\n  }, 30000);\r\n});\r\n\r\nonUnmounted(() => {\r\n  clearInterval(timer);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"tweet-container\"\r\n    :class=\"{ border: !isPreviousReply, new: isNotification }\"\r\n    @click=\"app.setTweetContext(props.id)\"\r\n  >\r\n    <div\r\n      class=\"user-retweet gray-text\"\r\n      v-if=\"props.type === 'retweet' && props.retweetedBy\"\r\n    >\r\n      <v-icon name=\"la-retweet-solid\" scale=\"0.89\" fill=\"#ffffff80\" />\r\n      {{ props.retweetedBy }}\r\n      Retweeted\r\n    </div>\r\n    <div class=\"tweet-body\">\r\n      <div class=\"profile-pic-container\">\r\n        <ProfilePicture\r\n          :url=\"props.user.avatarUrl\"\r\n          :size=\"48\"\r\n          @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n        />\r\n        <div class=\"gray-line\" v-if=\"isPreviousReply\"></div>\r\n      </div>\r\n      <div class=\"tweet-data\">\r\n        <div class=\"user-info-and-btn\">\r\n          <div class=\"user-info-wrapper\">\r\n            <span\r\n              class=\"display-name\"\r\n              @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n              ><a>{{ props.user.name }}</a></span\r\n            >\r\n            <span\r\n              class=\"username gray-text\"\r\n              @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n              ><a>@{{ props.user.username }}</a></span\r\n            >\r\n            <span class=\"separator gray-text\">·</span>\r\n            <span class=\"tweet-time gray-text\">{{ getTimeSinceCreation }}</span>\r\n          </div>\r\n          <span\r\n            class=\"tweet-action-icon extra-btn\"\r\n            @click.stop=\"toggleTweetMenu\"\r\n            ><v-icon name=\"hi-dots-horizontal\" scale=\"1.0\" fill=\"#ffffff80\" />\r\n            <div v-if=\"isTweetMenuOpen\" class=\"overlay\"></div>\r\n            <div v-if=\"isTweetMenuOpen\" class=\"tweet-menu-container\">\r\n              <ul class=\"tweet-menu-list\">\r\n                <li\r\n                  class=\"tweet-menu-item delete-tweet\"\r\n                  v-if=\"\r\n                    app.currentId == props.user.id || app.currentUser.isAdmin\r\n                  \"\r\n                  @click=\"deleteTweet\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon name=\"bi-trash\" scale=\"1.1\" fill=\"red\" /></span\r\n                  >Delete\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.canFollow(app.currentUser, props.user.id)\"\r\n                  @click=\"users.followUser(app.currentId, props.user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-follow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Follow @{{ props.user.username }}\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.canUnfollow(app.currentUser, props.user.id)\"\r\n                  @click=\"users.unfollowUser(app.currentId, props.user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-unfollow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Unfollow @{{ props.user.username }}\r\n                </li>\r\n                <button class=\"cancel-btn\">Cancel</button>\r\n              </ul>\r\n            </div></span\r\n          >\r\n        </div>\r\n        <div class=\"tweet-content\">\r\n          <div\r\n            class=\"replying-to\"\r\n            v-if=\"props.tweet.type === 'reply' && props.tweet.replyingToTweet\"\r\n          >\r\n            <span class=\"gray-text\">Replying to </span>\r\n            <a\r\n              class=\"blue-link\"\r\n              @click.stop=\"app.viewUserProfile(props.replyingTo)\"\r\n              >@{{ props.replyingTo }}</a\r\n            >\r\n          </div>\r\n          <div class=\"tweet-text\">\r\n            <EmbeddedText :text=\"props.tweet.text\" />\r\n          </div>\r\n          <div\r\n            class=\"tweet-media\"\r\n            :class=\"[getMediaClass(props.tweet.media)]\"\r\n            v-if=\"props.tweet.media.length > 0\"\r\n          >\r\n            <div\r\n              class=\"image-preview-wrapper\"\r\n              v-for=\"img in props.tweet.media\"\r\n              :key=\"props.tweet.media.indexOf(img)\"\r\n            >\r\n              <img :src=\"img\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"tweet-actions-wrapper\">\r\n          <span class=\"tweet-metrics\">\r\n            <span class=\"tweet-action-icon reply-btn\" @click.stop=\"setReply\"\r\n              ><v-icon name=\"fa-regular-comment\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric reply-metric gray-text\">{{\r\n              props.tweet.repliesFrom.length > 0\r\n                ? props.tweet.repliesFrom.length\r\n                : \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon retweet-btn\"\r\n              :class=\"{ retweeted: isRetweeted }\"\r\n              @click.stop=\"toggleRetweet\"\r\n              ><v-icon name=\"la-retweet-solid\" scale=\"1.15\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric retweet-metric gray-text\">{{\r\n              props.tweet.retweetCount || \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon like-btn\"\r\n              :class=\"{ liked: isLiked }\"\r\n              @click.stop=\"toggleLike\"\r\n              ><v-icon name=\"fa-regular-heart\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric like-metric gray-text\">{{\r\n              props.tweet.likeCount || \"\"\r\n            }}</span>\r\n          </span>\r\n          <span\r\n            class=\"tweet-action-icon share-tweet-btn\"\r\n            @click.stop=\"shareTweet\"\r\n            ><v-icon name=\"gi-share\" scale=\"1.0\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.blue-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.blue-link:focus {\r\n  outline: 0;\r\n}\r\n\r\n.tweet-container {\r\n  padding: 0.75rem 1rem 0 1rem;\r\n  width: 598px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  cursor: pointer;\r\n  transition: background-color 0.15s ease;\r\n}\r\n\r\n.border {\r\n  border-top: rgba(255, 255, 255, 0.25) 1px solid;\r\n}\r\n\r\n.tweet-container.new {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.tweet-container:hover {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.user-retweet {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding-left: 10%;\r\n  margin-bottom: 3px;\r\n  gap: 6px;\r\n}\r\n\r\n.tweet-body {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 1rem;\r\n}\r\n\r\n.profile-pic-container {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-self: stretch;\r\n  align-items: center;\r\n}\r\n\r\n.gray-line {\r\n  background-color: rgba(255, 255, 255, 0.25);\r\n  width: 2px;\r\n  height: 100%;\r\n  position: relative;\r\n  margin: auto;\r\n}\r\n\r\n.tweet-data {\r\n  width: 100%;\r\n}\r\n\r\n.user-info-and-btn {\r\n  width: 100%;\r\n  max-width: 505px;\r\n  height: 1rem;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.user-info-wrapper {\r\n  height: fit-content;\r\n  display: flex;\r\n  max-width: 93%;\r\n  width: 60vw;\r\n  flex-grow: 1;\r\n  column-gap: 5px;\r\n}\r\n\r\n.display-name,\r\n.username {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  min-width: 0px;\r\n  width: 100%;\r\n  max-width: fit-content;\r\n  display: inline-block;\r\n}\r\n\r\n.display-name a {\r\n  color: white;\r\n}\r\n\r\n.tweet-time {\r\n  flex-shrink: 0;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tweet-text {\r\n  word-break: break-word;\r\n  word-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.username a {\r\n  vertical-align: center;\r\n  color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.tweet-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.replying-to {\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-actions-wrapper {\r\n  max-width: 425px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-action-icon {\r\n  width: 34px;\r\n  height: 34px;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.extra-btn {\r\n  position: relative;\r\n  left: 8px;\r\n}\r\n\r\n.tweet-action-icon,\r\n.tweet-action-icon svg,\r\n.tweet-metric {\r\n  transition-property: color, background-color, fill;\r\n  transition-duration: 0.15s;\r\n  transition-timing-function: ease;\r\n}\r\n\r\n.reply-btn:hover,\r\n.share-tweet-btn:hover,\r\n.extra-btn:hover {\r\n  background-color: rgba(0, 132, 255, 0.233);\r\n}\r\n\r\n.reply-btn:hover svg,\r\n.share-tweet-btn:hover svg,\r\n.extra-btn:hover > svg,\r\n.reply-btn:hover + .reply-metric {\r\n  color: rgb(20, 181, 245);\r\n  fill: rgb(20, 181, 245);\r\n}\r\n\r\n.retweet-btn:hover {\r\n  background-color: rgba(0, 255, 191, 0.158);\r\n}\r\n\r\n.retweet-btn:hover svg,\r\n.retweet-btn.retweeted svg,\r\n.retweet-btn:hover + .retweet-metric,\r\n.retweet-btn.retweeted + .retweet-metric {\r\n  color: rgb(16, 211, 169);\r\n  fill: rgb(16, 211, 169);\r\n}\r\n\r\n.like-btn:hover {\r\n  background-color: rgba(255, 0, 64, 0.233);\r\n}\r\n\r\n.like-btn:hover svg,\r\n.like-btn.liked svg,\r\n.like-btn:hover + .like-metric,\r\n.like-btn.liked + .like-metric {\r\n  color: rgb(226, 28, 104);\r\n  fill: rgb(226, 28, 104);\r\n}\r\n\r\nsvg {\r\n  z-index: 0;\r\n}\r\n\r\n.tweet-metrics {\r\n  user-select: none;\r\n  position: relative;\r\n  left: -8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.tweet-metric {\r\n  width: 32px;\r\n  position: relative;\r\n  left: 0px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.tweet-media {\r\n  max-width: 100%;\r\n  width: fit-content;\r\n  margin-top: 0.9rem;\r\n  border: rgba(255, 255, 255, 0.25) 1px solid;\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-media img,\r\n.tweet-media div {\r\n  position: relative;\r\n  background-size: cover;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  max-width: 100%;\r\n  height: 100%;\r\n  max-height: 510px;\r\n  object-fit: cover;\r\n}\r\n\r\n.two-img,\r\n.three-img,\r\n.four-img {\r\n  display: grid;\r\n  gap: 2px;\r\n  grid-template-columns: 50% 50%;\r\n  max-height: 285px;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.three-img {\r\n  grid-template-columns: 50% 50%;\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas:\r\n    \"first second\"\r\n    \"first third\";\r\n}\r\n\r\n.three-img > :first-child {\r\n  grid-area: first;\r\n}\r\n\r\n.three-img > :nth-child(2) {\r\n  grid-area: second;\r\n}\r\n\r\n.three-img > :last-child {\r\n  grid-area: third;\r\n}\r\n\r\n.four-img {\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas: none;\r\n}\r\n\r\n.three-img img,\r\n.four-img img {\r\n  width: 100%;\r\n}\r\n\r\n.tweet-menu-container {\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 6px rgba(255, 255, 255, 0.3);\r\n  color: white;\r\n  position: absolute;\r\n  min-width: 150px;\r\n  width: max-content;\r\n  height: fit-content;\r\n  z-index: 5;\r\n  right: 8px;\r\n  top: 8px;\r\n  cursor: default;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-menu-container li {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 0.7em;\r\n  text-align: center;\r\n}\r\n\r\n.tweet-menu-container li:hover {\r\n  background-color: rgba(255, 255, 255, 0.137);\r\n}\r\n\r\n.tweet-menu-list {\r\n  margin: 0;\r\n}\r\n\r\n.tweet-menu-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 4;\r\n  cursor: default;\r\n}\r\n\r\n.delete-tweet {\r\n  color: red;\r\n}\r\n\r\n.cancel-btn {\r\n  display: none;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n",
    "import script from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetCard.vue?vue&type=style&index=0&id=bb0b921c&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"
  ],
  "names": [
    "users",
    "useUsersStore",
    "tweets",
    "computed",
    "props",
    "filter",
    "tweet",
    "data",
    "__exports__",
    "textEl",
    "ref",
    "app",
    "useAppStore",
    "embedLinks",
    "text",
    "length",
    "embedArr",
    "split",
    "map",
    "str",
    "urlRegex",
    "hashtagRegex",
    "atRegex",
    "replace",
    "slice",
    "join",
    "onMounted",
    "anchors",
    "value",
    "querySelectorAll",
    "Array",
    "from",
    "forEach",
    "anchor",
    "addEventListener",
    "handleClick",
    "e",
    "stopPropagation",
    "viewUserProfile",
    "dataset",
    "username",
    "this",
    "removeEventListener",
    "watch",
    "useTweetStore",
    "relativeTime",
    "require",
    "dayjs",
    "timer",
    "isTweetMenuOpen",
    "currentTime",
    "toISOString",
    "getTimeSinceCreation",
    "formatDateMixin",
    "timestamp",
    "isLiked",
    "hasLiked",
    "id",
    "currentId",
    "isRetweeted",
    "hasRetweeted",
    "toggleTweetMenu",
    "deleteTweet",
    "removeTweet",
    "user",
    "toggleLike",
    "removeLike",
    "addLike",
    "retweetedBy",
    "toggleRetweet",
    "removeRetweet",
    "addRetweet",
    "setReply",
    "setModalType",
    "setModalReply",
    "toggleModal",
    "shareTweet",
    "toast",
    "navigator",
    "clipboard",
    "writeText",
    "window",
    "location",
    "host",
    "diff",
    "setInterval",
    "onUnmounted",
    "clearInterval"
  ],
  "sourceRoot": ""
}
