{"version":3,"file":"js/105.4dc42363.js","mappings":"0UASA,MAAMA,GAAQC,EAAAA,EAAAA,KACRC,GAAQC,EAAAA,EAAAA,KACRC,GAASC,EAAAA,EAAAA,KAAS,IAAML,EAAMI,SAC9BE,GAAYC,EAAAA,EAAAA,IAChBP,EAAMQ,kBAAN,mBAA4BR,EAAMS,kBAAkBP,EAAMQ,aAA9B,mBAExBC,GAAUJ,EAAAA,EAAAA,KAAI,GACdK,GAAWL,EAAAA,EAAAA,KAAI,GAGfM,EAAcC,UACbZ,EAAMQ,YACXE,EAASG,OAAQ,QACXC,QAAQC,IACZC,EAAIC,KAAIL,SACNM,OAAOC,aAAarB,EAAMsB,SAASC,EAAEC,IAAK,CACxCC,KAAMF,EAAEE,KACRC,YACa,YAAXH,EAAEE,WAA2BvB,EAAMyB,QAAQJ,EAAEK,YAAc,KAC7DC,qBAAsB3B,EAAM4B,YAAYP,EAAEM,gBAC1CE,UAAWR,EAAEQ,eAGjBC,MAAMC,IACNjC,EAAMI,OAAO8B,QAAQlC,EAAMQ,gBAAgByB,IAC3CtB,EAAQI,OAAQ,EAChBH,EAASG,OAAQ,CAAjB,IAbF,E,OAiBFoB,EAAAA,EAAAA,KAAU,KACRnC,EAAMoC,UAAU,IAChBvB,EAAYP,EAAUS,MAAMsB,MAAM,EAAGrC,EAAMsC,YAA3C,KAGFC,EAAAA,EAAAA,IAAMnC,GAAQ,KACZJ,EAAMwC,YAAN,I,wXCvCF,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://chitter/./src/components/HomeView.vue","webpack://chitter/./src/components/HomeView.vue?f8ae"],"sourcesContent":["<script setup>\r\nimport { ref, computed, onMounted, watch, onUpdated } from \"vue\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport TweetList from \"./lists/TweetList.vue\";\r\nimport ComposeTweet from \"./subcomponents/ComposeTweet.vue\";\r\nimport LoadSpinner from \"./subcomponents/LoadSpinner.vue\";\r\nimport LoadTweets from \"./subcomponents/LoadTweets.vue\";\r\n\r\nconst store = useTweetStore();\r\nconst users = useUsersStore();\r\nconst tweets = computed(() => store.tweets);\r\nconst rawTweets = ref(\r\n  store.sortByTimestamp(await store.getTimelineTweets(users.currentId))\r\n);\r\nconst pending = ref(true); // initial load\r\nconst fetching = ref(true);\r\n\r\n// get all tweets from timeline document, have to update properties if the tweet is a reply and/or retweet\r\nconst fetchTweets = async (arr) => {\r\n  if (!users.currentId) return;\r\n  fetching.value = true;\r\n  await Promise.all(\r\n    arr.map(async (t) =>\r\n      Object.assign(await store.getTweet(t.id), {\r\n        type: t.type,\r\n        retweetedBy:\r\n          t.type === \"retweet\" ? await users.getName(t.fromUserId) : null,\r\n        replyingToUser: await users.getUsername(t.replyingToUser),\r\n        timestamp: t.timestamp,\r\n      })\r\n    )\r\n  ).then((values) => {\r\n    store.tweets.push(...store.sortByTimestamp(values));\r\n    pending.value = false;\r\n    fetching.value = false;\r\n  });\r\n};\r\n\r\nonMounted(() => {\r\n  store.setTweets([]);\r\n  fetchTweets(rawTweets.value.slice(0, store.fetchLimit));\r\n});\r\n\r\nwatch(tweets, () => {\r\n  store.sortTweets();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <ComposeTweet />\r\n    <div class=\"tweet-list-container\">\r\n      <TweetList v-if=\"!pending\" :tweets=\"tweets\" :pending=\"pending\" />\r\n      <LoadSpinner v-else-if=\"!fetching\" />\r\n      <LoadTweets\r\n        :isFetching=\"fetching\"\r\n        :rawTweets=\"rawTweets.slice(store.fetchLimit)\"\r\n        :fetch=\"fetchTweets\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\ndiv {\r\n  width: 100%;\r\n}\r\n</style>\r\n","import script from \"./HomeView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./HomeView.vue?vue&type=style&index=0&id=45b87b7d&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-45b87b7d\"]])\n\nexport default __exports__"],"names":["store","useTweetStore","users","useUsersStore","tweets","computed","rawTweets","ref","sortByTimestamp","getTimelineTweets","currentId","pending","fetching","fetchTweets","async","value","Promise","all","arr","map","Object","assign","getTweet","t","id","type","retweetedBy","getName","fromUserId","replyingToUser","getUsername","timestamp","then","values","push","onMounted","setTweets","slice","fetchLimit","watch","sortTweets","__exports__"],"sourceRoot":""}