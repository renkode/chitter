{
  "version": 3,
  "file": "js/539.e50396a0.js",
  "mappings": "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",
  "sources": [
    "webpack://chitter/./src/components/subcomponents/NotificationCard.vue",
    "webpack://chitter/./src/components/subcomponents/NotificationCard.vue?c46b",
    "webpack://chitter/./src/components/lists/NotificationList.vue",
    "webpack://chitter/./src/components/lists/NotificationList.vue?17c0",
    "webpack://chitter/./src/components/NotificationMain.vue",
    "webpack://chitter/./src/components/NotificationMain.vue?8aa2",
    "webpack://chitter/./src/components/subcomponents/EmbeddedText.vue",
    "webpack://chitter/./src/components/subcomponents/EmbeddedText.vue?411b",
    "webpack://chitter/./src/components/subcomponents/TweetCard.vue",
    "webpack://chitter/./src/components/subcomponents/TweetCard.vue?5deb"
  ],
  "sourcesContent": [
    "<script setup>\r\nimport { defineProps, computed } from \"vue\";\r\nimport ProfilePicture from \"../subcomponents/ProfilePicture.vue\";\r\nimport { useAppStore } from \"@/stores/app\";\r\n\r\nconst app = useAppStore();\r\nconst props = defineProps({\r\n  type: String,\r\n  id: String,\r\n  userId: String,\r\n  iconUrl: String,\r\n  name: String,\r\n  username: String,\r\n  tweetText: String,\r\n  containsMedia: Boolean,\r\n  isNew: Boolean,\r\n});\r\nconst notifText = computed(() => {\r\n  switch (props.type) {\r\n    case \"like-origin\":\r\n      return \" liked your Tweet\";\r\n    case \"like-retweet\":\r\n      return \" liked your Retweet\";\r\n    case \"retweet-origin\":\r\n      return \" Retweeted your Tweet\";\r\n    case \"retweet-retweet\":\r\n      return \" Retweeted your Retweet\";\r\n    default:\r\n      return \" followed you\";\r\n  }\r\n});\r\nconst fakeMediaUrl = computed(() => ` pic.chitter.com/${props.id}`);\r\nconst isLike = computed(\r\n  () => props.type === \"like-origin\" || props.type === \"like-retweet\"\r\n);\r\nconst isRetweet = computed(\r\n  () => props.type === \"retweet-origin\" || props.type === \"retweet-retweet\"\r\n);\r\n\r\nfunction handleClick() {\r\n  if (props.type === \"follow\") {\r\n    app.viewUserProfile(props.username);\r\n  } else {\r\n    app.setTweetContext(props.id);\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"notif-container\" :class=\"{ new: isNew }\" @click=\"handleClick\">\r\n    <div class=\"icon-container\">\r\n      <span class=\"notif-icon\" v-if=\"isLike\">\r\n        <v-icon name=\"bi-heart-fill\" scale=\"1.6\" fill=\"#e21c68\"\r\n      /></span>\r\n      <span class=\"notif-icon\" v-else-if=\"isRetweet\">\r\n        <v-icon name=\"la-retweet-solid\" scale=\"1.6\" fill=\"#10d3a9\"\r\n      /></span>\r\n      <span class=\"notif-icon\" v-else-if=\"props.type === 'follow'\">\r\n        <v-icon name=\"io-person\" scale=\"1.5\" fill=\"#14b5f5\"\r\n      /></span>\r\n    </div>\r\n    <div class=\"notif-body\">\r\n      <ProfilePicture :url=\"props.iconUrl\" :size=\"32\" />\r\n      <div class=\"notif-text\">\r\n        <strong>{{ props.name }}</strong\r\n        >{{ notifText }}\r\n      </div>\r\n      <div class=\"tweet-text gray-text\">\r\n        {{ props.tweetText\r\n        }}<span v-if=\"containsMedia\">{{ fakeMediaUrl }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.notif-container {\r\n  border-top: rgba(255, 255, 255, 0.25) 1px solid;\r\n  padding: 1rem 1.25rem;\r\n  max-width: 598px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  cursor: pointer;\r\n  transition: background-color 0.15s ease;\r\n  gap: 1rem;\r\n  width: 100%;\r\n  flex-grow: 1;\r\n  justify-self: stretch;\r\n}\r\n.notif-container:hover {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.notif-container.new {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.icon-container {\r\n  width: 48px;\r\n  align-self: stretch;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.notif-body {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n</style>\r\n",
    "import script from \"./NotificationCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NotificationCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./NotificationCard.vue?vue&type=style&index=0&id=19f0781d&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__",
    "<script setup>\r\nimport { defineProps } from \"vue\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport TweetCard from \"../subcomponents/TweetCard.vue\";\r\nimport NotificationCard from \"../subcomponents/NotificationCard.vue\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({ notifs: Array }); // { fromUser, type, tweetId }\r\n</script>\r\n\r\n<template>\r\n  <div class=\"notif-list\">\r\n    <TransitionGroup name=\"fade-down\" v-if=\"props.notifs.length > 0\">\r\n      <template v-for=\"(notif, index) in props.notifs\">\r\n        <template v-if=\"notif.type === 'reply'\">\r\n          <TweetCard\r\n            :key=\"index\"\r\n            :id=\"notif.tweetId\"\r\n            :user=\"{\r\n              id: notif.fromUser,\r\n              name: users.getUser(notif.fromUser).name,\r\n              username: users.getUser(notif.fromUser).username,\r\n              avatarUrl: users.getUser(notif.fromUser).avatarUrl,\r\n            }\"\r\n            :tweet=\"tweets.getTweet(notif.tweetId)\"\r\n            :type=\"'reply'\"\r\n            :replyingTo=\"users.currentUser.username\"\r\n            :isNewNotification=\"\r\n              users.tweetIsNewNotification(users.currentId, notif.tweetId)\r\n            \"\r\n          />\r\n        </template>\r\n\r\n        <template v-else-if=\"notif.type === 'mention'\">\r\n          <TweetCard\r\n            :key=\"index\"\r\n            :id=\"notif.tweetId\"\r\n            :user=\"{\r\n              id: notif.fromUser,\r\n              name: users.getUser(notif.fromUser).name,\r\n              username: users.getUser(notif.fromUser).username,\r\n              avatarUrl: users.getUser(notif.fromUser).avatarUrl,\r\n            }\"\r\n            :tweet=\"tweets.getTweet(notif.tweetId)\"\r\n            :type=\"'status'\"\r\n            :isNewNotification=\"\r\n              users.tweetIsNewNotification(users.currentId, notif.tweetId)\r\n            \"\r\n          />\r\n        </template>\r\n\r\n        <template v-else-if=\"notif.type !== 'reply' && notif.type !== 'follow'\">\r\n          <NotificationCard\r\n            :key=\"index\"\r\n            :id=\"notif.tweetId\"\r\n            :type=\"notif.type\"\r\n            :iconUrl=\"users.getUser(notif.fromUser).avatarUrl\"\r\n            :name=\"users.getUser(notif.fromUser).name\"\r\n            :username=\"users.getUser(notif.fromUser).username\"\r\n            :tweetText=\"tweets.getTweet(notif.tweetId).text\"\r\n            :containsMedia=\"tweets.getTweet(notif.tweetId).media.length > 0\"\r\n            :isNew=\"users.isNewNotification(users.currentId, notif)\"\r\n          />\r\n        </template>\r\n\r\n        <template v-else>\r\n          <NotificationCard\r\n            :key=\"index\"\r\n            :type=\"notif.type\"\r\n            :userId=\"users.getUser(notif.fromUser).id\"\r\n            :iconUrl=\"users.getUser(notif.fromUser).avatarUrl\"\r\n            :name=\"users.getUser(notif.fromUser).name\"\r\n            :username=\"users.getUser(notif.fromUser).username\"\r\n            :isNew=\"users.isNewNotification(users.currentId, notif)\"\r\n          />\r\n        </template>\r\n      </template>\r\n    </TransitionGroup>\r\n    <div class=\"error gray-text\" v-else>No notifications to display</div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.fade-down-enter-active,\r\n.fade-down-leave-active {\r\n  transition: all 0.12s ease;\r\n}\r\n\r\n.fade-down-enter-from,\r\n.fade-down-leave-to {\r\n  transform: translateY(-15px);\r\n  opacity: 0;\r\n}\r\n\r\n.fade-down-leave-from {\r\n  opacity: 1;\r\n}\r\n\r\n.notif-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: fit-content;\r\n  max-width: 598px;\r\n  width: 100%;\r\n  flex: 1;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .notif-list {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n",
    "import script from \"./NotificationList.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NotificationList.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./NotificationList.vue?vue&type=style&index=0&id=177cbf85&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-177cbf85\"]])\n\nexport default __exports__",
    "<script setup>\r\nimport { onMounted, onUnmounted, computed } from \"vue\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\nimport NotificationList from \"./lists/NotificationList.vue\";\r\n\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst notifs = computed(() => users.getAllNotifications(users.currentId));\r\n\r\nasync function delay(time) {\r\n  await new Promise((res) => {\r\n    setTimeout(() => {\r\n      //console.log(res);\r\n    }, time);\r\n  });\r\n}\r\n\r\nonMounted(() => {\r\n  delay(0);\r\n});\r\n\r\nonUnmounted(() => {\r\n  users.clearNotifications(users.currentId);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"tweet-list-container\">\r\n    <NotificationList :notifs=\"notifs\" />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.tweet-list-container {\r\n  width: 100%;\r\n}\r\n</style>\r\n",
    "import script from \"./NotificationMain.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NotificationMain.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./NotificationMain.vue?vue&type=style&index=0&id=7113043f&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__",
    "<script setup>\r\nimport { ref, defineProps, onMounted } from \"vue\";\r\nimport { urlRegex, hashtagRegex, atRegex } from \"@/mixins/utilities.js\";\r\nimport { useAppStore } from \"@/stores/app\";\r\n\r\nconst props = defineProps([\"text\"]);\r\nconst textEl = ref(null);\r\nconst app = useAppStore();\r\n\r\nconst embedLinks = () => {\r\n  if (!props.text || props.text.length === 0) return;\r\n\r\n  const embedArr = props.text.split(\" \").map((str) => {\r\n    const newLineSplit = str.split(/\\r?\\n/);\r\n    switch (true) {\r\n      case urlRegex.test(str):\r\n        return `<a class=\"blue-link\" href=\"${str}\" target=\"_blank\">${str}</a>`;\r\n      case hashtagRegex.test(str):\r\n        return `<a class=\"blue-link\">${str}</a>`;\r\n      case newLineSplit.some((word) => atRegex.test(word)): // SPLIT BY NEWLINE\r\n        return newLineSplit\r\n          .map((word) => {\r\n            if (atRegex.test(word)) {\r\n              return `<a class=\"blue-link user-link\" data-username=${str.replace(\r\n                \"@\",\r\n                \"\"\r\n              )}>${newLineSplit.filter((word) => atRegex.test(word))[0]}</a>`;\r\n            } else {\r\n              return word;\r\n            }\r\n          })\r\n          .join(\"\\n\");\r\n      default:\r\n        return str;\r\n    }\r\n  });\r\n  return embedArr.join(\" \");\r\n};\r\n\r\nonMounted(() => {\r\n  const anchors = textEl.value.querySelectorAll(\".user-link\");\r\n  Array.from(anchors).forEach((anchor) =>\r\n    anchor.addEventListener(\r\n      \"click\",\r\n      function handleClick(e) {\r\n        e.stopPropagation();\r\n        app.viewUserProfile(anchor.dataset.username);\r\n      },\r\n      {\r\n        capture: false,\r\n        once: true,\r\n      }\r\n    )\r\n  );\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"textEl\" v-html=\"embedLinks()\"></div>\r\n</template>\r\n\r\n<style scoped>\r\na {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n",
    "import script from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./EmbeddedText.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./EmbeddedText.vue?vue&type=style&index=0&id=6a7454c8&scoped=true&lang=css\"\n\nimport exportComponent from \"C:\\\\Documents\\\\repos\\\\chitter\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6a7454c8\"]])\n\nexport default __exports__",
    "<script setup>\r\nimport { ref, defineProps, computed, onMounted, onBeforeUnmount } from \"vue\";\r\nimport dayjs from \"dayjs\";\r\nimport ProfilePicture from \"./ProfilePicture.vue\";\r\nimport EmbeddedText from \"./EmbeddedText.vue\";\r\nimport formatDateMixin from \"@/mixins/formatDateMixin.js\";\r\nimport { getMediaClass } from \"@/mixins/utilities.js\";\r\nimport { useTweetStore } from \"@/stores/tweets.js\";\r\nimport { useAppStore } from \"@/stores/app.js\";\r\nimport { useUsersStore } from \"@/stores/users.js\";\r\n\r\nconst tweets = useTweetStore();\r\nconst app = useAppStore();\r\nconst users = useUsersStore();\r\nconst props = defineProps({\r\n  id: String,\r\n  user: Object, // id, name, username, avatarUrl\r\n  tweet: Object,\r\n  type: String, // status, retweet, reply\r\n  retweetedBy: String,\r\n  replyingTo: String,\r\n  isPreviousReply: Boolean, // render gray line for tweet thread\r\n  isNewNotification: Boolean, // highlight if new notification\r\n});\r\n\r\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\r\ndayjs.extend(relativeTime);\r\nlet timer = null;\r\n\r\nconst isTweetMenuOpen = ref(false);\r\nconst currentTime = ref(dayjs().toISOString());\r\nconst getTimeSinceCreation = ref(\r\n  formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n);\r\nconst isLiked = computed(() => tweets.hasLiked(props.tweet.id, users.currentId));\r\nconst isRetweeted = computed(() =>\r\n  tweets.hasRetweeted(props.tweet.id, users.currentId)\r\n);\r\n\r\nconst toggleTweetMenu = () => {\r\n  if (!users.currentUser) return;\r\n  isTweetMenuOpen.value = !isTweetMenuOpen.value;\r\n};\r\n\r\nconst deleteTweet = () => {\r\n  tweets.removeTweet(props.id, props.user.id);\r\n};\r\n\r\nconst toggleLike = () => {\r\n  if (!isLiked.value) {\r\n    tweets.addLike(props.id, users.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeLike(props.id, users.currentId);\r\n  }\r\n};\r\nconst toggleRetweet = () => {\r\n  if (!isRetweeted.value) {\r\n    tweets.addRetweet(props.id, users.currentId, props.retweetedBy);\r\n  } else {\r\n    tweets.removeRetweet(props.id, users.currentId);\r\n  }\r\n};\r\nconst setReply = () => {\r\n  app.setModalType(\"reply\");\r\n  app.setModalReply(props.user.id, props.id);\r\n  app.toggleModal();\r\n};\r\nconst shareTweet = () => {\r\n  app.toast(\"Copied to clipboard\");\r\n  navigator.clipboard.writeText(`${window.location.host}/status/${props.id}`);\r\n};\r\n\r\nonMounted(() => {\r\n  // update tweet time every 30s (if tweet isn't a day old);\r\n  if (dayjs(currentTime.value).diff(dayjs(props.tweet.timestamp), \"hour\") > 23)\r\n    return;\r\n  timer = setInterval(() => {\r\n    if (\r\n      getTimeSinceCreation.value !==\r\n      formatDateMixin.formatTweetDate(props.tweet.timestamp, currentTime.value)\r\n    ) {\r\n      getTimeSinceCreation.value = formatDateMixin.formatTweetDate(\r\n        props.tweet.timestamp,\r\n        currentTime.value\r\n      );\r\n    }\r\n  }, 30000);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  clearInterval(timer);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"tweet-container\"\r\n    :class=\"{ border: !isPreviousReply, new: isNewNotification }\"\r\n    @click=\"app.setTweetContext(props.id)\"\r\n  >\r\n    <div\r\n      class=\"user-retweet gray-text\"\r\n      v-if=\"props.type === 'retweet' && props.retweetedBy\"\r\n    >\r\n      <v-icon name=\"la-retweet-solid\" scale=\"0.89\" fill=\"#ffffff80\" />\r\n      {{ props.retweetedBy }}\r\n      Retweeted\r\n    </div>\r\n    <div class=\"tweet-body\">\r\n      <div class=\"profile-pic-container\">\r\n        <ProfilePicture\r\n          :url=\"props.user.avatarUrl\"\r\n          :size=\"48\"\r\n          @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n        />\r\n        <div class=\"gray-line\" v-if=\"isPreviousReply\"></div>\r\n      </div>\r\n      <div class=\"tweet-data\">\r\n        <div class=\"user-info-and-btn\">\r\n          <div class=\"user-info-wrapper\">\r\n            <span\r\n              class=\"display-name\"\r\n              @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n              ><a>{{ props.user.name }}</a></span\r\n            >\r\n            <span\r\n              class=\"username gray-text\"\r\n              @click.stop=\"app.viewUserProfile(props.user.username)\"\r\n              ><a>@{{ props.user.username }}</a></span\r\n            >\r\n            <span class=\"separator gray-text\">·</span>\r\n            <span class=\"tweet-time gray-text\">{{ getTimeSinceCreation }}</span>\r\n          </div>\r\n          <span\r\n            class=\"tweet-action-icon extra-btn\"\r\n            @click.stop=\"toggleTweetMenu\"\r\n            ><v-icon name=\"hi-dots-horizontal\" scale=\"1.0\" fill=\"#ffffff80\" />\r\n            <div v-if=\"isTweetMenuOpen\" class=\"overlay\"></div>\r\n            <div v-if=\"isTweetMenuOpen\" class=\"tweet-menu-container\">\r\n              <ul class=\"tweet-menu-list\">\r\n                <li\r\n                  class=\"tweet-menu-item delete-tweet\"\r\n                  v-if=\"\r\n                    users.currentId == props.user.id || users.currentUser.isAdmin\r\n                  \"\r\n                  @click=\"deleteTweet\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon name=\"bi-trash\" scale=\"1.1\" fill=\"red\" /></span\r\n                  >Delete\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.canFollow(users.currentUser, props.user.id)\"\r\n                  @click=\"users.followUser(users.currentId, props.user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-follow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Follow @{{ props.user.username }}\r\n                </li>\r\n                <li\r\n                  class=\"tweet-menu-item\"\r\n                  v-if=\"users.canUnfollow(users.currentUser, props.user.id)\"\r\n                  @click=\"users.unfollowUser(users.currentId, props.user.id)\"\r\n                >\r\n                  <span class=\"tweet-menu-icon\"\r\n                    ><v-icon\r\n                      name=\"co-user-unfollow\"\r\n                      scale=\"1.1\"\r\n                      fill=\"#ffffff80\" /></span\r\n                  >Unfollow @{{ props.user.username }}\r\n                </li>\r\n                <button class=\"cancel-btn\">Cancel</button>\r\n              </ul>\r\n            </div></span\r\n          >\r\n        </div>\r\n        <div class=\"tweet-content\">\r\n          <div\r\n            class=\"replying-to\"\r\n            v-if=\"props.tweet.type === 'reply' && props.tweet.replyingToTweet\"\r\n          >\r\n            <span class=\"gray-text\">Replying to </span>\r\n            <a\r\n              class=\"blue-link\"\r\n              @click.stop=\"app.viewUserProfile(props.replyingTo)\"\r\n              >@{{ props.replyingTo }}</a\r\n            >\r\n          </div>\r\n          <div class=\"tweet-text\">\r\n            <EmbeddedText :text=\"props.tweet.text\" />\r\n          </div>\r\n          <div\r\n            class=\"tweet-media\"\r\n            :class=\"[getMediaClass(props.tweet.media)]\"\r\n            v-if=\"props.tweet.media.length > 0\"\r\n          >\r\n            <div\r\n              class=\"image-preview-wrapper\"\r\n              v-for=\"img in props.tweet.media\"\r\n              :key=\"props.tweet.media.indexOf(img)\"\r\n            >\r\n              <img :src=\"img\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"tweet-actions-wrapper\">\r\n          <span class=\"tweet-metrics\">\r\n            <span class=\"tweet-action-icon reply-btn\" @click.stop=\"setReply\"\r\n              ><v-icon name=\"fa-regular-comment\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric reply-metric gray-text\">{{\r\n              props.tweet.repliesFrom.length > 0\r\n                ? props.tweet.repliesFrom.length\r\n                : \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon retweet-btn\"\r\n              :class=\"{ retweeted: isRetweeted }\"\r\n              @click.stop=\"toggleRetweet\"\r\n              ><v-icon name=\"la-retweet-solid\" scale=\"1.15\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric retweet-metric gray-text\">{{\r\n              props.tweet.retweetCount || \"\"\r\n            }}</span>\r\n          </span>\r\n          <span class=\"tweet-metrics\">\r\n            <span\r\n              class=\"tweet-action-icon like-btn\"\r\n              :class=\"{ liked: isLiked }\"\r\n              @click.stop=\"toggleLike\"\r\n              ><v-icon name=\"fa-regular-heart\" scale=\"1.0\" fill=\"#ffffff80\"\r\n            /></span>\r\n            <span class=\"tweet-metric like-metric gray-text\">{{\r\n              props.tweet.likeCount || \"\"\r\n            }}</span>\r\n          </span>\r\n          <span\r\n            class=\"tweet-action-icon share-tweet-btn\"\r\n            @click.stop=\"shareTweet\"\r\n            ><v-icon name=\"gi-share\" scale=\"1.0\" fill=\"#ffffff80\"\r\n          /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.blue-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.blue-link:focus {\r\n  outline: 0;\r\n}\r\n\r\n.tweet-container {\r\n  padding: 0.75rem 1rem 0 1rem;\r\n  width: 598px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  cursor: pointer;\r\n  transition: background-color 0.15s ease;\r\n}\r\n\r\n.border {\r\n  border-top: rgba(255, 255, 255, 0.25) 1px solid;\r\n}\r\n\r\n.tweet-container.new {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.tweet-container:hover {\r\n  background-color: rgba(255, 255, 255, 0.065);\r\n}\r\n\r\n.user-retweet {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding-left: 10%;\r\n  margin-bottom: 3px;\r\n  gap: 6px;\r\n}\r\n\r\n.tweet-body {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 1rem;\r\n}\r\n\r\n.profile-pic-container {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-self: stretch;\r\n  align-items: center;\r\n}\r\n\r\n.gray-line {\r\n  background-color: rgba(255, 255, 255, 0.25);\r\n  width: 2px;\r\n  height: 100%;\r\n  position: relative;\r\n  margin: auto;\r\n}\r\n\r\n.tweet-data {\r\n  width: 100%;\r\n}\r\n\r\n.user-info-and-btn {\r\n  width: 100%;\r\n  max-width: 505px;\r\n  height: 1rem;\r\n  margin-bottom: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.user-info-wrapper {\r\n  height: fit-content;\r\n  display: flex;\r\n  max-width: 93%;\r\n  width: 60vw;\r\n  flex-grow: 1;\r\n  column-gap: 5px;\r\n}\r\n\r\n.display-name,\r\n.username {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  min-width: 0px;\r\n  width: 100%;\r\n  max-width: fit-content;\r\n  display: inline-block;\r\n}\r\n\r\n.display-name a {\r\n  color: white;\r\n}\r\n\r\n.tweet-time {\r\n  flex-shrink: 0;\r\n  white-space: nowrap;\r\n}\r\n\r\n.tweet-text {\r\n  word-break: break-word;\r\n  word-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.username a {\r\n  vertical-align: center;\r\n  color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.tweet-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.replying-to {\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-actions-wrapper {\r\n  max-width: 425px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.tweet-action-icon {\r\n  width: 34px;\r\n  height: 34px;\r\n  border-radius: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.extra-btn {\r\n  position: relative;\r\n  left: 8px;\r\n}\r\n\r\n.tweet-action-icon,\r\n.tweet-action-icon svg,\r\n.tweet-metric {\r\n  transition-property: color, background-color, fill;\r\n  transition-duration: 0.15s;\r\n  transition-timing-function: ease;\r\n}\r\n\r\n.reply-btn:hover,\r\n.share-tweet-btn:hover,\r\n.extra-btn:hover {\r\n  background-color: rgba(0, 132, 255, 0.233);\r\n}\r\n\r\n.reply-btn:hover svg,\r\n.share-tweet-btn:hover svg,\r\n.extra-btn:hover > svg,\r\n.reply-btn:hover + .reply-metric {\r\n  color: rgb(20, 181, 245);\r\n  fill: rgb(20, 181, 245);\r\n}\r\n\r\n.retweet-btn:hover {\r\n  background-color: rgba(0, 255, 191, 0.158);\r\n}\r\n\r\n.retweet-btn:hover svg,\r\n.retweet-btn.retweeted svg,\r\n.retweet-btn:hover + .retweet-metric,\r\n.retweet-btn.retweeted + .retweet-metric {\r\n  color: rgb(16, 211, 169);\r\n  fill: rgb(16, 211, 169);\r\n}\r\n\r\n.like-btn:hover {\r\n  background-color: rgba(255, 0, 64, 0.233);\r\n}\r\n\r\n.like-btn:hover svg,\r\n.like-btn.liked svg,\r\n.like-btn:hover + .like-metric,\r\n.like-btn.liked + .like-metric {\r\n  color: rgb(226, 28, 104);\r\n  fill: rgb(226, 28, 104);\r\n}\r\n\r\nsvg {\r\n  z-index: 0;\r\n}\r\n\r\n.tweet-metrics {\r\n  user-select: none;\r\n  position: relative;\r\n  left: -8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.tweet-metric {\r\n  width: 32px;\r\n  position: relative;\r\n  left: 0px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.tweet-media {\r\n  max-width: 100%;\r\n  width: fit-content;\r\n  margin-top: 0.9rem;\r\n  border: rgba(255, 255, 255, 0.25) 1px solid;\r\n  border-radius: 20px;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-media img,\r\n.tweet-media div {\r\n  position: relative;\r\n  background-size: cover;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  max-width: 100%;\r\n  height: 100%;\r\n  max-height: 510px;\r\n  object-fit: cover;\r\n}\r\n\r\n.two-img,\r\n.three-img,\r\n.four-img {\r\n  display: grid;\r\n  gap: 2px;\r\n  grid-template-columns: 50% 50%;\r\n  max-height: 285px;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.three-img {\r\n  grid-template-columns: 50% 50%;\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas:\r\n    \"first second\"\r\n    \"first third\";\r\n}\r\n\r\n.three-img > :first-child {\r\n  grid-area: first;\r\n}\r\n\r\n.three-img > :nth-child(2) {\r\n  grid-area: second;\r\n}\r\n\r\n.three-img > :last-child {\r\n  grid-area: third;\r\n}\r\n\r\n.four-img {\r\n  grid-template-rows: 50% 50%;\r\n  grid-template-areas: none;\r\n}\r\n\r\n.three-img img,\r\n.four-img img {\r\n  width: 100%;\r\n}\r\n\r\n.tweet-menu-container {\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 6px rgba(255, 255, 255, 0.3);\r\n  color: white;\r\n  position: absolute;\r\n  min-width: 150px;\r\n  width: max-content;\r\n  height: fit-content;\r\n  z-index: 5;\r\n  right: 8px;\r\n  top: 8px;\r\n  cursor: default;\r\n  overflow: hidden;\r\n}\r\n\r\n.tweet-menu-container li {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 0.7em;\r\n  text-align: center;\r\n}\r\n\r\n.tweet-menu-container li:hover {\r\n  background-color: rgba(255, 255, 255, 0.137);\r\n}\r\n\r\n.tweet-menu-list {\r\n  margin: 0;\r\n}\r\n\r\n.tweet-menu-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 4;\r\n  cursor: default;\r\n}\r\n\r\n.delete-tweet {\r\n  color: red;\r\n}\r\n\r\n.cancel-btn {\r\n  display: none;\r\n}\r\n\r\n@media screen and (max-width: 700px) {\r\n  .tweet-container {\r\n    max-width: 600px;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n",
    "import script from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TweetCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TweetCard.vue?vue&type=style&index=0&id=4cd139b3&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"
  ],
  "names": [
    "app",
    "useAppStore",
    "notifText",
    "computed",
    "props",
    "type",
    "fakeMediaUrl",
    "id",
    "isLike",
    "isRetweet",
    "handleClick",
    "viewUserProfile",
    "username",
    "setTweetContext",
    "__exports__",
    "tweets",
    "useTweetStore",
    "users",
    "useUsersStore",
    "notifs",
    "getAllNotifications",
    "currentId",
    "async",
    "delay",
    "time",
    "Promise",
    "res",
    "setTimeout",
    "onMounted",
    "onUnmounted",
    "clearNotifications",
    "textEl",
    "ref",
    "embedLinks",
    "text",
    "length",
    "embedArr",
    "split",
    "map",
    "str",
    "newLineSplit",
    "urlRegex",
    "hashtagRegex",
    "some",
    "word",
    "atRegex",
    "replace",
    "filter",
    "join",
    "anchors",
    "value",
    "querySelectorAll",
    "Array",
    "from",
    "forEach",
    "anchor",
    "addEventListener",
    "e",
    "stopPropagation",
    "dataset",
    "capture",
    "once",
    "relativeTime",
    "require",
    "dayjs",
    "timer",
    "isTweetMenuOpen",
    "currentTime",
    "toISOString",
    "getTimeSinceCreation",
    "formatDateMixin",
    "tweet",
    "timestamp",
    "isLiked",
    "hasLiked",
    "isRetweeted",
    "hasRetweeted",
    "toggleTweetMenu",
    "currentUser",
    "deleteTweet",
    "removeTweet",
    "user",
    "toggleLike",
    "removeLike",
    "addLike",
    "retweetedBy",
    "toggleRetweet",
    "removeRetweet",
    "addRetweet",
    "setReply",
    "setModalType",
    "setModalReply",
    "toggleModal",
    "shareTweet",
    "toast",
    "navigator",
    "clipboard",
    "writeText",
    "window",
    "location",
    "host",
    "diff",
    "setInterval",
    "onBeforeUnmount",
    "clearInterval"
  ],
  "sourceRoot": ""
}
